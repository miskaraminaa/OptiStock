{"version":3,"file":"static/js/949.48ce3e32.chunk.js","mappings":"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","sources":["pages/protected/Dimensions.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport TitleCard from \"../../components/Cards/TitleCard\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Dimensions = () => {\r\n    const [ids, setIds] = useState([]);\r\n    const [dimensions, setDimensions] = useState([]);\r\n    const [selectedId, setSelectedId] = useState(\"\");\r\n    const [longueur, setLongueur] = useState(\"\");\r\n    const [largeur, setLargeur] = useState(\"\");\r\n    const [hauteur, setHauteur] = useState(\"\");\r\n    const [poids, setPoids] = useState(\"\");\r\n    const [qte, setQte] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [data, setData] = useState(null);\r\n\r\n    const BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n    const tableRef = useRef(null);\r\n\r\n    // Fetch article IDs\r\n    useEffect(() => {\r\n        const fetchIds = async () => {\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/dimensions/ids`, {\r\n                    method: \"GET\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                });\r\n                if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n                const result = await res.json();\r\n                const sortedIds = result.ids?.sort((a, b) => a.localeCompare(b)) || [];\r\n                setIds(sortedIds);\r\n            } catch (err) {\r\n                console.error(\"Error fetching IDs:\", err);\r\n                setMessage(`Erreur lors du chargement des IDs: ${err.message}`);\r\n            }\r\n        };\r\n        fetchIds();\r\n    }, [BASE_URL]);\r\n\r\n    // Fetch all dimensions\r\n    useEffect(() => {\r\n        const fetchDimensions = async () => {\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/dimensions/`, {\r\n                    method: \"GET\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                });\r\n                if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n                const result = await res.json();\r\n                setDimensions(result.data || []);\r\n            } catch (err) {\r\n                console.error(\"Error fetching dimensions:\", err);\r\n                setMessage(`Erreur lors du chargement des dimensions: ${err.message}`);\r\n            }\r\n        };\r\n        fetchDimensions();\r\n    }, [BASE_URL]);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!selectedId || !longueur || !largeur || !hauteur || !poids || !qte) {\r\n            setMessage(\"Tous les champs sont requis.\");\r\n            return;\r\n        }\r\n\r\n        const longueurNum = parseFloat(longueur);\r\n        const largeurNum = parseFloat(largeur);\r\n        const hauteurNum = parseFloat(hauteur);\r\n        const poidsNum = parseFloat(poids);\r\n        const qteNum = parseInt(qte, 10);\r\n\r\n        if (isNaN(longueurNum) || isNaN(largeurNum) || isNaN(hauteurNum) ||\r\n            isNaN(poidsNum) || isNaN(qteNum) || qteNum < 1) {\r\n            setMessage(\"Veuillez entrer des valeurs numériques valides (quantité ≥ 1).\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const body = { id_article: selectedId, longueur: longueurNum, largeur: largeurNum, hauteur: hauteurNum, poids: poidsNum, qte: qteNum };\r\n            const res = await fetch(`${BASE_URL}/dimensions/`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify(body),\r\n            });\r\n            const result = await res.json();\r\n            if (res.ok) {\r\n                setMessage(\"Dimensions enregistrées avec succès.\");\r\n                setData(result.data[0]);\r\n                const dimensionsRes = await fetch(`${BASE_URL}/dimensions/`);\r\n                const dimensionsResult = await dimensionsRes.json();\r\n                setDimensions(dimensionsResult.data || []);\r\n            } else {\r\n                setMessage(result.message || \"Erreur lors de l'enregistrement.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error submitting dimensions:\", err);\r\n            setMessage(\"Erreur serveur: \" + err.message);\r\n        }\r\n    };\r\n\r\n    // Handle Excel export\r\n    const handleExportExcel = () => {\r\n        if (dimensions.length === 0) {\r\n            setMessage(\"Aucune donnée à exporter.\");\r\n            return;\r\n        }\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(dimensions);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Dimensions\");\r\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n        const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.download = `dimensions_export_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n    };\r\n\r\n    // Handle print\r\n    const handlePrint = () => {\r\n        const printContent = tableRef.current;\r\n        if (!printContent) {\r\n            console.error(\"Table reference is null. Ensure the table is rendered.\");\r\n            return;\r\n        }\r\n\r\n        const printWindow = window.open('', '', 'height=600,width=800');\r\n        if (printWindow) {\r\n            printWindow.document.write('<html><head><title>Print</title>');\r\n            printWindow.document.write('<style>body { margin: 0; } table { width: 100%; border-collapse: collapse; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; }</style>');\r\n            printWindow.document.write('</head><body>');\r\n            printWindow.document.write(printContent.outerHTML);\r\n            printWindow.document.write('</body></html>');\r\n            printWindow.document.close();\r\n            printWindow.focus();\r\n            printWindow.print();\r\n            printWindow.close();\r\n        } else {\r\n            console.error(\"Failed to open print window. Check browser popup settings.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TitleCard title=\"Gestion des Dimensions\">\r\n            <div className=\"p-6 bg-white rounded-lg shadow-lg\">\r\n                <h2 className=\"text-xl font-semibold mb-4 no-print\">Ajouter/Modifier Dimensions</h2>\r\n                <form onSubmit={handleSubmit} className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 no-print\">\r\n                    <div className=\"col-span-1\">\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">ID Article</label>\r\n                        <select\r\n                            value={selectedId}\r\n                            onChange={(e) => setSelectedId(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            required\r\n                        >\r\n                            <option value=\"\">Sélectionner un ID</option>\r\n                            {ids.map((id) => <option key={id} value={id}>{id}</option>)}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Longueur (m)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={longueur}\r\n                            onChange={(e) => setLongueur(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            step=\"0.01\"\r\n                            min=\"0\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Largeur (m)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={largeur}\r\n                            onChange={(e) => setLargeur(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            step=\"0.01\"\r\n                            min=\"0\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hauteur (m)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={hauteur}\r\n                            onChange={(e) => setHauteur(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            step=\"0.01\"\r\n                            min=\"0\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Poids (kg)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={poids}\r\n                            onChange={(e) => setPoids(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            step=\"0.01\"\r\n                            min=\"0\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Quantité</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={qte}\r\n                            onChange={(e) => setQte(e.target.value)}\r\n                            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                            step=\"1\"\r\n                            min=\"1\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-span-1 md:col-span-2 lg:col-span-3 flex justify-end mt-4\">\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"w-full md:w-auto px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\r\n                        >\r\n                            Enregistrer\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                {message && <p className=\"mt-4 text-sm text-center text-red-600 no-print\">{message}</p>}\r\n                {data && (\r\n                    <div className=\"mt-6 p-4 bg-gray-50 rounded-md shadow-inner no-print\">\r\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Données enregistrées</h3>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                            <p><span className=\"font-medium\">ID Article:</span> {data.id_article}</p>\r\n                            <p><span className=\"font-medium\">Longueur:</span> {data.longueur} m</p>\r\n                            <p><span className=\"font-medium\">Largeur:</span> {data.largeur} m</p>\r\n                            <p><span className=\"font-medium\">Hauteur:</span> {data.hauteur} m</p>\r\n                            <p><span className=\"font-medium\">Poids:</span> {data.poids} kg</p>\r\n                            <p><span className=\"font-medium\">Quantité:</span> {data.quantite}</p>\r\n                            <p><span className=\"font-medium\">Volume:</span> {data.volume} m³</p>\r\n                            <p><span className=\"font-medium\">Volume/Quantité:</span> {data.volume_quantite} m³</p>\r\n                            <p><span className=\"font-medium\">Poids Global:</span> {data.poids_global} kg</p>\r\n                            <p><span className=\"font-medium\">Type Rayon:</span> {data.Type_Rayon}</p>\r\n                            <p><span className=\"font-medium\">Manutention:</span> {data.manutention}</p>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"mt-8\">\r\n                    <h2 className=\"text-xl font-semibold mb-4\">Explorer les Dimensions</h2>\r\n                    <div className=\"mb-4 flex space-x-4\">\r\n                        <button\r\n                            onClick={handleExportExcel}\r\n                            className=\"px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors\"\r\n                        >\r\n                            Exporter en Excel\r\n                        </button>\r\n                        <button\r\n                            onClick={handlePrint}\r\n                            className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\r\n                        >\r\n                            Imprimer\r\n                        </button>\r\n                    </div>\r\n                    {dimensions.length > 0 ? (\r\n                        <div className=\"overflow-x-auto print-table\">\r\n                            <table ref={tableRef} className=\"min-w-full bg-white border border-gray-300\">\r\n                                <thead>\r\n                                    <tr className=\"bg-gray-100\">\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">ID Article</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Longueur (m)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Largeur (m)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Hauteur (m)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Poids (kg)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Quantité</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Volume (m³)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Volume/Quantité (m³)</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Type Rayon</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Manutention</th>\r\n                                        <th className=\"py-2 px-4 border-b text-left text-sm font-medium text-gray-700\">Poids Global (kg)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {dimensions.map((dim) => (\r\n                                        <tr key={dim.id_article} className=\"hover:bg-gray-50\">\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.id_article}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.longueur}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.largeur}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.hauteur}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.poids}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.quantite}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.volume}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.volume_quantite}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.Type_Rayon}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.manutention}</td>\r\n                                            <td className=\"py-2 px-4 border-b text-sm text-gray-900\">{dim.poids_global}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ) : (\r\n                        <p className=\"text-sm text-gray-600\">Aucune dimension enregistrée.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </TitleCard>\r\n    );\r\n};\r\n\r\nexport default Dimensions;"],"names":["ids","setIds","useState","dimensions","setDimensions","selectedId","setSelectedId","longueur","setLongueur","largeur","setLargeur","hauteur","setHauteur","poids","setPoids","qte","setQte","message","setMessage","data","setData","BASE_URL","process","tableRef","useRef","useEffect","async","res","fetch","method","headers","ok","Error","status","sortedIds","json","sort","a","b","localeCompare","err","console","error","fetchIds","result","fetchDimensions","title","className","onSubmit","e","preventDefault","longueurNum","parseFloat","largeurNum","hauteurNum","poidsNum","qteNum","parseInt","isNaN","body","id_article","JSON","stringify","dimensionsRes","dimensionsResult","value","onChange","target","required","map","id","type","step","min","quantite","volume","volume_quantite","poids_global","Type_Rayon","manutention","onClick","length","worksheet","XLSX","workbook","excelBuffer","bookType","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","Date","toISOString","split","appendChild","click","removeChild","revokeObjectURL","printContent","current","printWindow","window","open","write","outerHTML","close","focus","print","ref","dim"],"sourceRoot":""}