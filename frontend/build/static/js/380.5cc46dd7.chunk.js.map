{"version":3,"file":"static/js/380.5cc46dd7.chunk.js","mappings":"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","sources":["features/charts/components/LineChart.js","features/charts/components/BarChart.js","features/charts/components/DoughnutChart.js","features/charts/components/PieChart.js","features/charts/components/ScatterChart.js","features/charts/components/StackBarChart.js","features/charts/index.js","pages/protected/Charts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\r\n\r\nconst LineChart = ({ startDate, endDate, article }) => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const formatDate = (date) => {\r\n          if (!date) return null;\r\n          if (typeof date === 'string') return date;\r\n          return date.toISOString().split('T')[0];\r\n        };\r\n\r\n        const formattedStartDate = formatDate(startDate);\r\n        const formattedEndDate = formatDate(endDate);\r\n\r\n        if (!formattedStartDate || !formattedEndDate) {\r\n          throw new Error('Invalid date range provided');\r\n        }\r\n\r\n        const url = new URL(`${BASE_URL}/charts/stock-over-time`);\r\n        url.searchParams.append('startDate', formattedStartDate);\r\n        url.searchParams.append('endDate', formattedEndDate);\r\n        if (article) {\r\n          url.searchParams.append('article', article);\r\n        }\r\n\r\n        console.log('Fetching data from:', url.toString());\r\n\r\n        const res = await fetch(url.toString());\r\n\r\n        if (!res.ok) {\r\n          const errorText = await res.text();\r\n          throw new Error(`HTTP ${res.status}: ${errorText}`);\r\n        }\r\n\r\n        const result = await res.json();\r\n        console.log('API Response:', result);\r\n\r\n        if (!result.data || !Array.isArray(result.data)) {\r\n          throw new Error('Invalid data format received from API');\r\n        }\r\n\r\n        if (result.data.length === 0) {\r\n          setData({\r\n            labels: [],\r\n            datasets: [{\r\n              label: 'Stock Quantity',\r\n              data: [],\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              fill: true,\r\n              tension: 0.1,\r\n            }]\r\n          });\r\n          setError('No data available for the selected date range');\r\n          return;\r\n        }\r\n\r\n        const processedData = result.data.map(row => ({\r\n          date: new Date(row.date).toLocaleDateString(),\r\n          total_quantity: parseFloat(row.total_quantity) || 0\r\n        }));\r\n\r\n        const chartData = {\r\n          labels: processedData.map(row => row.date),\r\n          datasets: [{\r\n            label: article ? `Stock for ${article}` : 'Total Stock Quantity',\r\n            data: processedData.map(row => row.total_quantity),\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            fill: true,\r\n            tension: 0.1,\r\n            pointRadius: 3,\r\n            pointHoverRadius: 5,\r\n          }],\r\n        };\r\n\r\n        setData(chartData);\r\n        setError(null);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching LineChart data:', error);\r\n        setError(`Failed to load data: ${error.message}`);\r\n        setData({ labels: [], datasets: [] });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (startDate && endDate) {\r\n      fetchData();\r\n    } else {\r\n      setError('Please provide valid start and end dates');\r\n      setLoading(false);\r\n    }\r\n  }, [startDate, endDate, article, BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-2 rounded-lg shadow-lg h-80 flex flex-col\"> {/* Adjusted to h-48 for consistency */}\r\n      <h2 className=\"text-lg font-semibold mb-1 flex-shrink-0\"> {/* Reduced margin */}\r\n        Stock Levels Over Time\r\n        {article && <span className=\"text-sm text-gray-600 ml-2\">({article})</span>}\r\n      </h2>\r\n      {loading ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-gray-500\">Loading...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-red-500 text-center\">{error}</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex-1 min-h-0 relative\">\r\n          <Line\r\n            data={data}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              height: 150, // Fixed height to match other charts\r\n              scales: {\r\n                x: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Date',\r\n                    font: { size: 10 } // Reduced font size\r\n                  },\r\n                  ticks: {\r\n                    maxRotation: 45,\r\n                    minRotation: 45,\r\n                    font: { size: 8 } // Reduced font size\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Quantity',\r\n                    font: { size: 10 } // Reduced font size\r\n                  },\r\n                  beginAtZero: true,\r\n                  ticks: {\r\n                    font: { size: 8 } // Reduced font size\r\n                  }\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: {\r\n                  position: 'bottom', // Moved to bottom for consistency with latest DoughnutChart\r\n                  labels: {\r\n                    boxWidth: 8, // Reduced for consistency\r\n                    font: { size: 10 }, // Reduced font size\r\n                    padding: 5 // Reduced padding\r\n                  }\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: (ctx) => `${ctx.dataset.label}: ${ctx.parsed.y.toLocaleString()} units`\r\n                  }\r\n                },\r\n              },\r\n              interaction: {\r\n                intersect: false,\r\n                mode: 'index'\r\n              },\r\n              layout: {\r\n                padding: 5 // Reduced padding for consistency\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst BarChart = ({ startDate, endDate, article }) => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const formatDate = (date) => {\r\n          if (!date) return null;\r\n          if (typeof date === 'string') return date;\r\n          return date.toISOString().split('T')[0];\r\n        };\r\n\r\n        const formattedStartDate = formatDate(startDate);\r\n        const formattedEndDate = formatDate(endDate);\r\n\r\n        if (!formattedStartDate || !formattedEndDate) {\r\n          throw new Error('Invalid date range provided');\r\n        }\r\n\r\n        const url = new URL(`${BASE_URL}/charts/input-vs-output`);\r\n        url.searchParams.append('startDate', formattedStartDate);\r\n        url.searchParams.append('endDate', formattedEndDate);\r\n        if (article) {\r\n          url.searchParams.append('article', article);\r\n        }\r\n\r\n        console.log('[BarChart] Fetching:', url.toString());\r\n\r\n        const res = await fetch(url.toString());\r\n\r\n        if (!res.ok) {\r\n          const errorText = await res.text();\r\n          throw new Error(`HTTP ${res.status}: ${errorText}`);\r\n        }\r\n\r\n        const result = await res.json();\r\n        console.log('[BarChart] Raw API response:', result);\r\n\r\n        if (!result.data || !Array.isArray(result.data)) {\r\n          throw new Error('Invalid data format received from API');\r\n        }\r\n\r\n        if (result.data.length === 0) {\r\n          setData({\r\n            labels: [],\r\n            datasets: [\r\n              {\r\n                label: 'Input (Receipts)',\r\n                data: [],\r\n                backgroundColor: 'rgba(54, 162, 235, 0.7)',\r\n                borderColor: 'rgba(54, 162, 235, 1)',\r\n                borderWidth: 1,\r\n              },\r\n              {\r\n                label: 'Output (Issues)',\r\n                data: [],\r\n                backgroundColor: 'rgba(255, 99, 132, 0.7)',\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n                borderWidth: 1,\r\n              },\r\n            ]\r\n          });\r\n          setError('No data available for the selected date range');\r\n          return;\r\n        }\r\n\r\n        const processedData = result.data.map(row => {\r\n          let formattedDate = 'Unknown';\r\n          if (row.date) {\r\n            try {\r\n              const parsedDate = new Date(row.date);\r\n              formattedDate = !isNaN(parsedDate.getTime()) ? parsedDate.toLocaleDateString() : row.date;\r\n            } catch (e) {\r\n              console.warn('[BarChart] Date formatting error:', e);\r\n              formattedDate = String(row.date);\r\n            }\r\n          }\r\n          return {\r\n            date: formattedDate,\r\n            input_quantity: parseFloat(row.input_quantity) || 0,\r\n            output_quantity: parseFloat(row.output_quantity) || 0\r\n          };\r\n        });\r\n\r\n        const chartData = {\r\n          labels: processedData.map(row => row.date),\r\n          datasets: [\r\n            {\r\n              label: 'Input (Receipts)',\r\n              data: processedData.map(row => row.input_quantity),\r\n              backgroundColor: 'rgba(54, 162, 235, 0.7)',\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: 'Output (Issues)',\r\n              data: processedData.map(row => row.output_quantity),\r\n              backgroundColor: 'rgba(255, 99, 132, 0.7)',\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        };\r\n\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('[BarChart] Fetch error:', error);\r\n        setError(`Failed to load data: ${error.message}`);\r\n        setData({ labels: [], datasets: [] });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (startDate && endDate) {\r\n      fetchData();\r\n    } else {\r\n      setError('Please provide valid start and end dates');\r\n      setLoading(false);\r\n    }\r\n  }, [startDate, endDate, article, BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-2 rounded-lg shadow-lg h-48 flex flex-col\"> {/* Adjusted to h-48, reduced padding */}\r\n      <h2 className=\"text-lg font-semibold mb-1 flex-shrink-0\"> {/* Reduced margin */}\r\n        Input vs Output Quantities\r\n        {article && <span className=\"text-sm text-gray-600 ml-2\">({article})</span>}\r\n      </h2>\r\n      {loading ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-gray-500\">Loading...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-red-500 text-center\">{error}</p>\r\n        </div>\r\n      ) : data.labels.length === 0 ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-gray-500\">No data available for the selected period</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex-1 min-h-0 relative\">\r\n          <Bar\r\n            data={data}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              height: 150, // Fixed height to match other charts\r\n              scales: {\r\n                x: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Date',\r\n                    font: { size: 10 } // Reduced font size\r\n                  },\r\n                  ticks: {\r\n                    maxRotation: 45,\r\n                    minRotation: 45,\r\n                    font: { size: 8 } // Reduced font size\r\n                  }\r\n                },\r\n                y: {\r\n                  title: {\r\n                    display: true,\r\n                    text: 'Quantity',\r\n                    font: { size: 10 } // Reduced font size\r\n                  },\r\n                  beginAtZero: true,\r\n                  ticks: {\r\n                    font: { size: 8 } // Reduced font size\r\n                  }\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: {\r\n                  position: 'bottom', // Moved to bottom for consistency\r\n                  labels: {\r\n                    boxWidth: 8, // Reduced for consistency\r\n                    font: { size: 10 }, // Reduced font size\r\n                    padding: 5 // Reduced padding\r\n                  }\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: (ctx) => {\r\n                      const suffix = ctx.dataset.label.includes('Output') ? ' (Goods Issued)' : ' (Goods Received)';\r\n                      return `${ctx.dataset.label}: ${ctx.parsed.y.toLocaleString()} units${suffix}`;\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n              interaction: {\r\n                intersect: false,\r\n                mode: 'index'\r\n              },\r\n              layout: {\r\n                padding: 5 // Reduced padding for consistency\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarChart;","import React, { useState, useEffect } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst DoughnutChart = () => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const res = await fetch(`${BASE_URL}/charts/division-distribution`);\r\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n        const result = await res.json();\r\n        if (!result.data || !Array.isArray(result.data)) throw new Error('Invalid data format');\r\n        const chartData = {\r\n          labels: result.data.map(row => row.division || 'Unknown'),\r\n          datasets: [{\r\n            data: result.data.map(row => row.article_count || 0),\r\n            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\r\n            borderWidth: 1,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching DoughnutChart data:', error);\r\n        setError('Failed to load data. Please check the API server.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-3 rounded-lg shadow-lg h-80 flex flex-col\">\r\n      <h2 className=\"text-lg font-semibold mb-2 flex-shrink-0\">Article Distribution by Division</h2>\r\n      {loading ? (\r\n        <p className=\"text-gray-500 flex-1 flex items-center justify-center\">Loading...</p>\r\n      ) : error ? (\r\n        <p className=\"text-red-500 flex-1 flex items-center justify-center\">{error}</p>\r\n      ) : (\r\n        <div className=\"flex-1 min-h-0 relative\">\r\n          <Doughnut\r\n            data={data}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'bottom',\r\n                  labels: {\r\n                    boxWidth: 10,\r\n                    font: { size: 10 },\r\n                    padding: 6,\r\n                    usePointStyle: true,\r\n                  },\r\n                  maxHeight: 60,\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: (ctx) => `${ctx.label}: ${ctx.parsed} articles`\r\n                  }\r\n                },\r\n              },\r\n              layout: {\r\n                padding: {\r\n                  top: 10,\r\n                  bottom: 5,\r\n                  left: 10,\r\n                  right: 10,\r\n                },\r\n              },\r\n              cutout: '60%',\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoughnutChart;","import React, { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst PieChart = () => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(`${BASE_URL}/charts/type-stock-distribution`);\r\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n        const result = await res.json();\r\n        const chartData = {\r\n          labels: result.data.map(row => row.type_stock || 'Unknown'),\r\n          datasets: [{\r\n            data: result.data.map(row => row.article_count || 0),\r\n            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n            borderWidth: 1,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching PieChart data:', error);\r\n        setError('Failed to load data. Please try again.');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-3 rounded-lg shadow-lg h-80 flex flex-col\">\r\n      <h2 className=\"text-lg font-semibold mb-2 flex-shrink-0\">Article Distribution by Stock Type</h2>\r\n      {error ? (\r\n        <p className=\"text-red-500 flex-1 flex items-center justify-center\">{error}</p>\r\n      ) : (\r\n        <div className=\"flex-1 min-h-0 relative\">\r\n          <Pie\r\n            data={data}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'right',\r\n                  labels: {\r\n                    boxWidth: 12,\r\n                    font: { size: 11 },\r\n                    padding: 8,\r\n                    usePointStyle: true,\r\n                  },\r\n                  maxWidth: 120,\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: (ctx) => `${ctx.label}: ${ctx.parsed} articles`\r\n                  }\r\n                },\r\n              },\r\n              layout: {\r\n                padding: 10,\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;","import React, { useState, useEffect } from 'react';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, PointElement, LinearScale, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(PointElement, LinearScale, Tooltip, Legend);\r\n\r\nconst ScatterChart = () => {\r\n  const [data, setData] = useState({ datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(`${BASE_URL}/charts/stock-vs-price`);\r\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n        const result = await res.json();\r\n        const chartData = {\r\n          datasets: [{\r\n            label: 'Stock vs Price',\r\n            data: result.data.map(row => ({ x: row.quantite, y: row.prix })),\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            pointRadius: 5,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching ScatterChart data:', error);\r\n        setError('Failed to load data. Please try again.');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-4 rounded-lg shadow-lg h-80\">\r\n      <h2 className=\"text-lg font-semibold mb-2\">Stock vs Price</h2>\r\n      {error ? (\r\n        <p className=\"text-red-500\">{error}</p>\r\n      ) : (\r\n        <Scatter\r\n          data={data}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              x: { title: { display: true, text: 'Quantity' }, beginAtZero: true },\r\n              y: { title: { display: true, text: 'Price' }, beginAtZero: true },\r\n            },\r\n            plugins: {\r\n              legend: { position: 'top', labels: { boxWidth: 10, font: { size: 12 } } },\r\n              tooltip: { callbacks: { label: ctx => `Quantity: ${ctx.raw.x}, Price: ${ctx.raw.y}` } },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScatterChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst StackBarChart = ({ startDate, endDate, article }) => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        // Convert to Date objects and validate\r\n        const start = startDate instanceof Date ? startDate : new Date(startDate);\r\n        const end = endDate instanceof Date ? endDate : new Date(endDate);\r\n\r\n        if (isNaN(start.getTime()) || isNaN(end.getTime()) || start > end) {\r\n          throw new Error('Invalid date range provided');\r\n        }\r\n\r\n        const url = new URL(`${BASE_URL}/charts/movement-by-code`);\r\n        url.searchParams.append('startDate', start.toISOString().split('T')[0]);\r\n        url.searchParams.append('endDate', end.toISOString().split('T')[0]);\r\n        if (article) url.searchParams.append('article', article);\r\n\r\n        console.log('[StackBarChart] Fetching from:', url.toString());\r\n        const res = await fetch(url, { method: 'GET' }); // Explicitly set method\r\n        if (!res.ok) {\r\n          const errorText = await res.text();\r\n          console.log('[StackBarChart] Error response:', errorText); // Debug error response\r\n          throw new Error(`HTTP ${res.status}: ${errorText}`);\r\n        }\r\n\r\n        const result = await res.json();\r\n        console.log('[StackBarChart] API Response:', result);\r\n\r\n        if (!result.data || !Array.isArray(result.data)) {\r\n          throw new Error('Invalid data format from API');\r\n        }\r\n\r\n        const chartData = {\r\n          labels: result.data.map(row => row.code_mouvement || 'Unknown'),\r\n          datasets: [{\r\n            label: 'Quantity by Movement Code',\r\n            data: result.data.map(row => row.total_quantity || 0),\r\n            backgroundColor: result.data.map(row =>\r\n              ['101', '531'].includes(row.code_mouvement) ? 'rgba(54, 162, 235, 0.7)' : 'rgba(255, 99, 132, 0.7)'\r\n            ),\r\n            borderColor: result.data.map(row =>\r\n              ['101', '531'].includes(row.code_mouvement) ? 'rgba(54, 162, 235, 1)' : 'rgba(255, 99, 132, 1)'\r\n            ),\r\n            borderWidth: 1,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching StackBarChart data:', error);\r\n        setError(`Failed to load data. Please try again. Details: ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [startDate, endDate, article, BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-2 rounded-lg shadow-lg h-48 flex flex-col\">\r\n      <h2 className=\"text-lg font-semibold mb-1\">Stock Movement by Code</h2>\r\n      {loading ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-gray-500\">Loading...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p className=\"text-red-500 text-center\">{error}</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex-1 min-h-0 relative\">\r\n          <Bar\r\n            data={data}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              height: 150,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: 'Movement Code', font: { size: 10 } },\r\n                  ticks: { font: { size: 8 } },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: 'Quantity', font: { size: 10 } },\r\n                  beginAtZero: true,\r\n                  ticks: { font: { size: 8 } },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: false },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: ctx => {\r\n                      const code = ctx.label;\r\n                      const value = ctx.parsed.y;\r\n                      const isIssue = ['201', '261'].includes(code);\r\n                      return `Code ${code}: ${value} units ${isIssue ? '(Goods Issued)' : '(Goods Received)'}`;\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n              layout: { padding: 5 },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StackBarChart;","import React, { useState, useEffect } from 'react';\r\nimport LineChart from './components/LineChart';\r\nimport BarChart from './components/BarChart';\r\nimport DoughnutChart from './components/DoughnutChart';\r\nimport PieChart from './components/PieChart';\r\nimport ScatterChart from './components/ScatterChart';\r\nimport StackBarChart from './components/StackBarChart';\r\nimport Datepicker from 'react-tailwindcss-datepicker';\r\n\r\nfunction Charts() {\r\n    const [dateValue, setDateValue] = useState({\r\n        startDate: new Date('2025-01-01'), // Changed to a past range with likely data\r\n        endDate: new Date('2025-04-31'),\r\n    });\r\n    const [articles, setArticles] = useState([]);\r\n    const [selectedArticle, setSelectedArticle] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [kpis, setKpis] = useState({\r\n        totalStock: 0,\r\n        totalInput: 0,\r\n        totalOutput: 0,\r\n        uniqueArticles: 0,\r\n    });\r\n    const [loadingKpis, setLoadingKpis] = useState(false);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchArticles = async () => {\r\n            try {\r\n                console.log('[Charts] Fetching articles from:', `${BASE_URL}/charts/articles`);\r\n                const res = await fetch(`${BASE_URL}/charts/articles`);\r\n                if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n                const result = await res.json();\r\n                console.log('[Charts] Articles data:', JSON.stringify(result.data, null, 2));\r\n                if (!result.data || !Array.isArray(result.data)) throw new Error('Invalid article data');\r\n                setArticles(result.data);\r\n                setError(null);\r\n            } catch (err) {\r\n                console.error('[Charts] Articles fetch error:', err);\r\n                setError('Failed to load articles. Please try again.');\r\n            }\r\n        };\r\n        fetchArticles();\r\n    }, [BASE_URL]);\r\n\r\n    useEffect(() => {\r\n        const fetchKpis = async () => {\r\n            setLoadingKpis(true);\r\n            setError(null);\r\n            try {\r\n                const start = dateValue.startDate?.toISOString().split('T')[0];\r\n                const end = dateValue.endDate?.toISOString().split('T')[0];\r\n                const [stockRes, inputRes, outputRes, uniqueRes] = await Promise.all([\r\n                    fetch(`${BASE_URL}/charts/total-stock?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/total-input?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/total-output?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/unique-articles`),\r\n                ]);\r\n\r\n                if (!stockRes.ok || !inputRes.ok || !outputRes.ok || !uniqueRes.ok) {\r\n                    throw new Error(`HTTP error: ${stockRes.status || inputRes.status || outputRes.status || uniqueRes.status}`);\r\n                }\r\n\r\n                const [stockData, inputData, outputData, uniqueData] = await Promise.all([\r\n                    stockRes.json(),\r\n                    inputRes.json(),\r\n                    outputRes.json(),\r\n                    uniqueRes.json(),\r\n                ]);\r\n\r\n                console.log('[Charts] KPI Data:', { stockData, inputData, outputData, uniqueData });\r\n                setKpis({\r\n                    totalStock: stockData.data || 0,\r\n                    totalInput: inputData.data || 0,\r\n                    totalOutput: outputData.data || 0,\r\n                    uniqueArticles: uniqueData.data || 0,\r\n                });\r\n            } catch (err) {\r\n                console.error('[Charts] KPI fetch error:', err);\r\n                setError(`Failed to load KPI data. Details: ${err.message}`);\r\n            } finally {\r\n                setLoadingKpis(false);\r\n            }\r\n        };\r\n        if (dateValue.startDate && dateValue.endDate) {\r\n            fetchKpis();\r\n        }\r\n    }, [dateValue, BASE_URL]);\r\n\r\n    const handleDatePickerValueChange = (newValue) => {\r\n        console.log('[Charts] Date changed to:', newValue);\r\n        setDateValue({\r\n            startDate: newValue.startDate ? new Date(newValue.startDate) : null,\r\n            endDate: newValue.endDate ? new Date(newValue.endDate) : null,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6 bg-white rounded-lg shadow-lg\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Data Analysis Dashboard</h2>\r\n            <div className=\"mb-6 flex space-x-4 items-end\">\r\n                <Datepicker\r\n                    containerClassName=\"w-72\"\r\n                    value={dateValue}\r\n                    theme=\"light\"\r\n                    inputClassName=\"input input-bordered w-full\"\r\n                    popoverDirection=\"down\"\r\n                    toggleClassName=\"invisible\"\r\n                    onChange={handleDatePickerValueChange}\r\n                    showShortcuts={true}\r\n                    primaryColor=\"white\"\r\n                />\r\n            </div>\r\n            <div className=\"mb-4\">\r\n                {loadingKpis ? (\r\n                    <p className=\"text-gray-500 text-center\">Loading KPIs...</p>\r\n                ) : error ? (\r\n                    <p className=\"text-red-500 text-center\">{error}</p>\r\n                ) : (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                        <div className=\"bg-white p-2 rounded-lg shadow-lg text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Total Stock</h3>\r\n                            <p className=\"text-2xl font-bold\">{kpis.totalStock.toLocaleString()}</p>\r\n                        </div>\r\n                        <div className=\"bg-white p-2 rounded-lg shadow-lg text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Total Input</h3>\r\n                            <p className=\"text-2xl font-bold\">{kpis.totalInput.toLocaleString()}</p>\r\n                        </div>\r\n                        <div className=\"bg-white p-2 rounded-lg shadow-lg text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Total Output</h3>\r\n                            <p className=\"text-2xl font-bold\">{kpis.totalOutput.toLocaleString()}</p>\r\n                        </div>\r\n                        <div className=\"bg-white p-2 rounded-lg shadow-lg text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Unique Articles</h3>\r\n                            <p className=\"text-2xl font-bold\">{kpis.uniqueArticles.toLocaleString()}</p>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"grid lg:grid-cols-2 gap-6\">\r\n                <StackBarChart startDate={dateValue.startDate} endDate={dateValue.endDate} article={selectedArticle} />\r\n                <BarChart startDate={dateValue.startDate} endDate={dateValue.endDate} />\r\n                <DoughnutChart />\r\n                <PieChart />\r\n                <ScatterChart />\r\n                <LineChart startDate={dateValue.startDate} endDate={dateValue.endDate} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport Charts from '../../features/charts'\r\nimport { setPageTitle } from '../../features/common/headerSlice'\r\n\r\nfunction InternalPage(){\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title : \"Analytics\"}))\r\n      }, [])\r\n\r\n\r\n    return(\r\n        <Charts />\r\n    )\r\n}\r\n\r\nexport default InternalPage"],"names":["ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","startDate","endDate","article","data","setData","useState","labels","datasets","error","setError","loading","setLoading","BASE_URL","process","useEffect","async","formatDate","date","toISOString","split","formattedStartDate","formattedEndDate","Error","url","URL","searchParams","append","console","log","toString","res","fetch","ok","errorText","text","status","result","json","Array","isArray","length","label","borderColor","backgroundColor","fill","tension","processedData","map","row","Date","toLocaleDateString","total_quantity","parseFloat","chartData","pointRadius","pointHoverRadius","message","fetchData","className","options","responsive","maintainAspectRatio","height","scales","x","title","display","font","size","ticks","maxRotation","minRotation","y","beginAtZero","plugins","legend","position","boxWidth","padding","tooltip","callbacks","ctx","dataset","parsed","toLocaleString","interaction","intersect","mode","layout","BarElement","borderWidth","formattedDate","parsedDate","isNaN","getTime","e","warn","String","input_quantity","output_quantity","suffix","includes","ArcElement","division","article_count","usePointStyle","maxHeight","top","bottom","left","right","cutout","type_stock","maxWidth","quantite","prix","raw","start","end","method","code_mouvement","code","value","isIssue","dateValue","setDateValue","articles","setArticles","selectedArticle","setSelectedArticle","kpis","setKpis","totalStock","totalInput","totalOutput","uniqueArticles","loadingKpis","setLoadingKpis","JSON","stringify","err","fetchArticles","stockRes","inputRes","outputRes","uniqueRes","Promise","all","stockData","inputData","outputData","uniqueData","fetchKpis","containerClassName","theme","inputClassName","popoverDirection","toggleClassName","onChange","newValue","showShortcuts","primaryColor","dispatch","useDispatch","setPageTitle"],"sourceRoot":""}