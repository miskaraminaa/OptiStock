{"version":3,"file":"static/js/77.6161545e.chunk.js","mappings":"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","sources":["features/leads/index.js","pages/protected/Leads.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport TitleCard from \"../../components/Cards/TitleCard\";\r\nimport TrashIcon from \"@heroicons/react/24/outline/TrashIcon\";\r\nimport moment from \"moment\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst Livraison = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [fileNames, setFileNames] = useState([]);\r\n    const [selectedFile, setSelectedFile] = useState(\"\");\r\n    const [selectedType, setSelectedType] = useState(\"LE\");\r\n    const [data, setData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        status: \"\",\r\n        deliveryCode: \"\",\r\n        articleCode: \"\",\r\n    });\r\n    const [selectedItems, setSelectedItems] = useState(new Set());\r\n    const [isLoadingFiles, setIsLoadingFiles] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [showAddForm, setShowAddForm] = useState(false);\r\n    const [newItem, setNewItem] = useState({});\r\n\r\n    const BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n\r\n    // Définitions des colonnes\r\n    const LE_COLUMNS = [\r\n        { header: \"N° LE\", key: \"Document\" },\r\n        { header: \"Statut Tâche Magasin\", key: \"Statut_tache_magasin\" },\r\n        { header: \"Produit\", key: \"Produit\" },\r\n        { header: \"Désignation Article\", key: \"designation_article\" },\r\n        { header: \"Famille\", key: \"famille\" },\r\n        { header: \"Libellé Produit\", key: \"libelle_produit\" },\r\n        { header: \"Longueur\", key: \"longueur\" },\r\n        { header: \"Largeur\", key: \"largeur\" },\r\n        { header: \"Hauteur\", key: \"hauteur\" },\r\n        { header: \"Volume\", key: \"volume\" },\r\n        { header: \"Poids\", key: \"poids\" },\r\n        { header: \"Quantité\", key: \"Quantite\" },\r\n        { header: \"Poids Global\", key: \"poids_global\" },\r\n        { header: \"Volume/Quantité\", key: \"volume_quantite\" },\r\n        { header: \"Manutention\", key: \"manutention\" },\r\n        { header: \"Type Rayon\", key: \"Type_Rayon\" },\r\n        { header: \"Plant-SLC\", key: \"Plant_Storage\" },\r\n        { header: \"Emplacement Cédant\", key: \"emplacement_cedant\" },\r\n        { header: \"Emplacement Prenant\", key: \"Emplacement_prenant\" },\r\n        { header: \"Emplacement Final EWM/Qte\", key: \"Emplacement_EWM_Qte\", style: { width: '200px' } },\r\n        { header: \"Qte Théo Céd UQA\", key: \"Qte_theo_ced_UQA\" },\r\n        { header: \"Quantité Entrante\", key: \"quantit\" },\r\n        { header: \"Qté Écart\", key: \"quantite_ecart\" },\r\n        { header: \"Statut Activité Magasin\", key: \"statut_entree_stock\" }, // Renommé pour plus de clarté\r\n    ];\r\n\r\n    const LS_COLUMNS = [\r\n        { header: \"N° LS\", key: \"Document\" },\r\n        { header: \"Statut\", key: \"Statut_tache_magasin\" },\r\n        { header: \"Produit\", key: \"Produit\" },\r\n        { header: \"Désignation\", key: \"designation_article\" },\r\n        { header: \"Famille\", key: \"famille\" },\r\n        { header: \"Libellé Produit\", key: \"libelle_produit\" },\r\n        { header: \"Plant-SLC\", key: \"Plant_Storage\" },\r\n        { header: \"Emplacement Cédant\", key: \"Emplacement_cedant\" },\r\n        { header: \"Emplacement Prenant\", key: \"Emplacement_prenant\" },\r\n        { header: \"Emplacement EWM/Qte\", key: \"Emplacement_EWM_Qte\" },\r\n        { header: \"Qte Théo Céd UQA\", key: \"Qte_theo_ced_UQA\" },\r\n        { header: \"Quantité\", key: \"quantit\" },\r\n        { header: \"Qté Écart\", key: \"quantite_ecart\" },\r\n        { header: \"Statut Activité Magasin\", key: \"statut_entree_stock\" }, // Renommé pour plus de clarté\r\n    ];\r\n\r\n    // Récupérer les noms de fichiers disponibles\r\n    useEffect(() => {\r\n        const fetchFiles = async () => {\r\n            setIsLoadingFiles(true);\r\n            setError(null);\r\n            setFileNames([]);\r\n            setSelectedFile(\"\");\r\n            const url = `${BASE_URL}/livraison/files`;\r\n            console.log(`Récupération des fichiers depuis : ${url} avec le type : ${selectedType}`);\r\n            try {\r\n                const res = await fetch(url, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({ type: selectedType }),\r\n                });\r\n                console.log(`Statut de la réponse : ${res.status}, URL : ${url}`);\r\n                if (!res.ok) {\r\n                    const errorText = await res.text();\r\n                    throw new Error(`Erreur HTTP ! statut : ${res.status}, message : ${errorText}`);\r\n                }\r\n                const data = await res.json();\r\n                console.log(`Fichiers reçus :`, data.files);\r\n                setFileNames(data.files || []);\r\n                setIsLoadingFiles(false);\r\n                if (data.files.length === 0) {\r\n                    setError(`Aucun fichier disponible pour le type ${selectedType}.`);\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Erreur lors de la récupération des fichiers :\", err);\r\n                setError(`Échec du chargement des noms de fichiers : ${err.message}`);\r\n                setIsLoadingFiles(false);\r\n            }\r\n        };\r\n        if (selectedType) {\r\n            fetchFiles();\r\n        }\r\n    }, [BASE_URL, selectedType]);\r\n\r\n    // Récupérer les données en fonction du fichier sélectionné et des filtres\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setError(null);\r\n            const url = `${BASE_URL}/livraison/process`;\r\n            const payload = {\r\n                type: selectedType,\r\n                fileName: selectedFile,\r\n                value: filters.articleCode || \"\",\r\n                stock: filters.status || \"Tous les statuts\",\r\n            };\r\n            console.log(`Récupération des données depuis : ${url} avec les données :`, payload);\r\n            try {\r\n                const res = await fetch(url, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(payload),\r\n                });\r\n                console.log(`Statut de la réponse : ${res.status}, URL : ${url}`);\r\n                if (!res.ok) {\r\n                    const errorText = await res.text();\r\n                    throw new Error(`Erreur HTTP ! statut : ${res.status}, message : ${errorText}`);\r\n                }\r\n                const data = await res.json();\r\n                console.log(`Données reçues :`, data);\r\n                setData(data);\r\n                setFilteredData(data);\r\n            } catch (err) {\r\n                console.error(\"Erreur lors de la récupération des données :\", err);\r\n                setError(`Échec du chargement des données pour le fichier sélectionné : ${err.message}`);\r\n            }\r\n        };\r\n        if (selectedFile && selectedType) {\r\n            fetchData();\r\n        } else {\r\n            setData([]);\r\n            setFilteredData([]);\r\n            if (!selectedFile && selectedType) {\r\n                setError(\"Veuillez sélectionner un fichier pour charger les données.\");\r\n            }\r\n        }\r\n    }, [selectedFile, filters, BASE_URL, selectedType]);\r\n\r\n    // Basculer la sélection d'un élément\r\n    const toggleItem = (index) => {\r\n        const newSelected = new Set(selectedItems);\r\n        if (newSelected.has(index)) {\r\n            newSelected.delete(index);\r\n        } else {\r\n            newSelected.add(index);\r\n        }\r\n        setSelectedItems(newSelected);\r\n    };\r\n\r\n    // Ajouter ou supprimer des éléments\r\n    const updateItems = (action) => {\r\n        if (action === \"add\" && newItem) {\r\n            const itemToAdd = {\r\n                ...newItem,\r\n                Document: newItem.Document || `LIV${moment().format(\"YYYYMMDDHHmmss\")}`,\r\n                Statut_tache_magasin: newItem.Statut_tache_magasin || \"Non terminée\",\r\n                statut_entree_stock: newItem.statut_entree_stock || \"Non terminée\",\r\n            };\r\n            if (selectedType === 'LE') {\r\n                itemToAdd.longueur = newItem.longueur || \"100\";\r\n                itemToAdd.largeur = newItem.largeur || \"50\";\r\n                itemToAdd.hauteur = newItem.hauteur || \"20\";\r\n                itemToAdd.volume = newItem.volume || \"100000\";\r\n                itemToAdd.poids = newItem.poids || \"10\";\r\n                itemToAdd.Quantite = newItem.Quantite || \"100\";\r\n                itemToAdd.poids_global = newItem.poids_global || \"1000\";\r\n                itemToAdd.volume_quantite = newItem.volume_quantite || \"1000\";\r\n                itemToAdd.manutention = newItem.manutention || \"Manuel\";\r\n                itemToAdd.Type_Rayon = newItem.Type_Rayon || \"Standard\";\r\n            }\r\n            if (newItem.Qte_theo_ced_UQA && newItem.quantit) {\r\n                itemToAdd.quantite_ecart = (parseFloat(newItem.Qte_theo_ced_UQA) - parseFloat(newItem.quantit)).toString();\r\n            }\r\n            const newData = [...filteredData, itemToAdd];\r\n            setFilteredData(newData);\r\n            setShowAddForm(false);\r\n            setNewItem({});\r\n        } else if (action === \"remove\" && selectedItems.size > 0) {\r\n            const newData = [...filteredData];\r\n            const indicesToRemove = Array.from(selectedItems).sort((a, b) => b - a);\r\n            indicesToRemove.forEach((index) => newData.splice(index, 1));\r\n            setSelectedItems(new Set());\r\n            setFilteredData(newData);\r\n        }\r\n    };\r\n\r\n    // Gérer la suppression\r\n    const handleDelete = (index) => {\r\n        const newData = [...filteredData];\r\n        newData.splice(index, 1);\r\n        setFilteredData(newData);\r\n        setSelectedItems(new Set());\r\n    };\r\n\r\n    // Exporter vers Excel\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(filteredData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Livraisons\");\r\n        XLSX.writeFile(wb, `livraison_${moment().format(\"YYYYMMDD_HHmmss\")}.xlsx`);\r\n    };\r\n\r\n    // Imprimer les données\r\n    const handlePrint = () => {\r\n        const printContent = document.getElementById(\"livraison-table\").outerHTML;\r\n        const printWindow = window.open('', '_blank');\r\n        printWindow.document.write(`\r\n            <html>\r\n                <head><title>Imprimer Livraison</title></head>\r\n                <body>${printContent}</body>\r\n            </html>\r\n        `);\r\n        printWindow.document.close();\r\n        printWindow.print();\r\n    };\r\n\r\n    const columns = selectedType === 'LE' ? LE_COLUMNS : LS_COLUMNS;\r\n\r\n    return (\r\n        <TitleCard title=\"Livraison\">\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n                <div className=\"flex space-x-2 mb-4\">\r\n                    <select\r\n                        value={selectedType}\r\n                        onChange={(e) => {\r\n                            setSelectedType(e.target.value);\r\n                            setSelectedFile(\"\");\r\n                            setFileNames([]);\r\n                            setError(null);\r\n                            setShowAddForm(false); // Réinitialiser le formulaire lorsque le type change\r\n                            setNewItem({});\r\n                        }}\r\n                        className=\"p-2 border rounded\"\r\n                    >\r\n                        <option value=\"LE\">Livraison Entrante (LE)</option>\r\n                        <option value=\"LS\">Livraison Sortante (LS)</option>\r\n                    </select>\r\n                    <select\r\n                        value={selectedFile}\r\n                        onChange={(e) => {\r\n                            setSelectedFile(e.target.value);\r\n                            setError(null);\r\n                            setShowAddForm(false); // Réinitialiser le formulaire lorsque le fichier change\r\n                            setNewItem({});\r\n                        }}\r\n                        className=\"p-2 border rounded\"\r\n                        disabled={isLoadingFiles}\r\n                    >\r\n                        <option value=\"\">{isLoadingFiles ? \"Chargement des fichiers...\" : \"Sélectionner un fichier\"}</option>\r\n                        {fileNames.map((name) => (\r\n                            <option key={name} value={name}>\r\n                                {name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <select\r\n                        value={filters.status}\r\n                        onChange={(e) => setFilters({ ...filters, status: e.target.value })}\r\n                        className=\"p-2 border rounded\"\r\n                    >\r\n                        <option value=\"Tous les statuts\">Tous les statuts</option>\r\n                        <option value=\"Terminée\">Terminée</option>\r\n                        <option value=\"Non terminée\">Non terminée</option>\r\n                    </select>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Code article\"\r\n                        value={filters.articleCode}\r\n                        onChange={(e) => setFilters({ ...filters, articleCode: e.target.value })}\r\n                        className=\"p-2 border rounded\"\r\n                    />\r\n                </div>\r\n                {error && <div className=\"text-red-500 mb-4\">{error}</div>}\r\n                <div className=\"flex space-x-2 mb-4\">\r\n                    <button\r\n                        onClick={() => setShowAddForm(!showAddForm)}\r\n                        className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600\"\r\n                        disabled={!selectedFile}\r\n                    >\r\n                        {showAddForm ? \"Annuler\" : \"Ajouter\"}\r\n                    </button>\r\n                    <button\r\n                        onClick={() => updateItems(\"remove\")}\r\n                        className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600\"\r\n                        disabled={selectedItems.size === 0}\r\n                    >\r\n                        Retirer\r\n                    </button>\r\n                    <button\r\n                        onClick={exportToExcel}\r\n                        className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600\"\r\n                    >\r\n                        Exporter Excel\r\n                    </button>\r\n                    <button\r\n                        onClick={handlePrint}\r\n                        className=\"bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600\"\r\n                    >\r\n                        Imprimer\r\n                    </button>\r\n                </div>\r\n                {showAddForm && (\r\n                    <div className=\"mb-4 p-4 border rounded bg-gray-50\">\r\n                        <h3 className=\"text-lg font-semibold mb-2\">Ajouter un nouvel article</h3>\r\n                        <form\r\n                            onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                updateItems(\"add\");\r\n                            }}\r\n                            className=\"grid grid-cols-2 gap-4\"\r\n                        >\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Document\"\r\n                                value={newItem.Document || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Document: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Produit\"\r\n                                value={newItem.Produit || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Produit: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Désignation Article\"\r\n                                value={newItem.designation_article || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, designation_article: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Famille\"\r\n                                value={newItem.famille || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, famille: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Libellé Produit\"\r\n                                value={newItem.libelle_produit || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, libelle_produit: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            {selectedType === 'LE' && (\r\n                                <>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Longueur\"\r\n                                        value={newItem.longueur || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, longueur: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Largeur\"\r\n                                        value={newItem.largeur || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, largeur: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Hauteur\"\r\n                                        value={newItem.hauteur || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, hauteur: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Volume\"\r\n                                        value={newItem.volume || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, volume: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Poids\"\r\n                                        value={newItem.poids || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, poids: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Quantité\"\r\n                                        value={newItem.Quantite || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, Quantite: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Poids Global\"\r\n                                        value={newItem.poids_global || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, poids_global: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Volume/Quantité\"\r\n                                        value={newItem.volume_quantite || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, volume_quantite: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Manutention\"\r\n                                        value={newItem.manutention || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, manutention: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Type Rayon\"\r\n                                        value={newItem.Type_Rayon || \"\"}\r\n                                        onChange={(e) => setNewItem({ ...newItem, Type_Rayon: e.target.value })}\r\n                                        className=\"p-2 border rounded\"\r\n                                    />\r\n                                </>\r\n                            )}\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Plant_Storage\"\r\n                                value={newItem.Plant_Storage || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Plant_Storage: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder={selectedType === 'LE' ? \"Emplacement Cédant\" : \"Emplacement Cédant\"}\r\n                                value={newItem.emplacement_cedant || newItem.Emplacement_cedant || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, [selectedType === 'LE' ? \"emplacement_cedant\" : \"Emplacement_cedant\"]: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Emplacement Prenant\"\r\n                                value={newItem.Emplacement_prenant || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Emplacement_prenant: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Emplacement EWM/Qte\"\r\n                                value={newItem.Emplacement_EWM_Qte || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Emplacement_EWM_Qte: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Qte Théo Céd UQA\"\r\n                                value={newItem.Qte_theo_ced_UQA || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Qte_theo_ced_UQA: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Quantité\"\r\n                                value={newItem.quantit || \"\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, quantit: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Qté Écart\"\r\n                                value={newItem.quantite_ecart || \"\"}\r\n                                readOnly\r\n                                className=\"p-2 border rounded bg-gray-100\"\r\n                            />\r\n                            <select\r\n                                value={newItem.Statut_tache_magasin || \"Non terminée\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, Statut_tache_magasin: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            >\r\n                                <option value=\"Non terminée\">Non terminée</option>\r\n                                <option value=\"Terminée\">Terminée</option>\r\n                            </select>\r\n                            <select\r\n                                value={newItem.statut_entree_stock || \"Non terminée\"}\r\n                                onChange={(e) => setNewItem({ ...newItem, statut_entree_stock: e.target.value })}\r\n                                className=\"p-2 border rounded\"\r\n                            >\r\n                                <option value=\"Non terminée\">Non terminée</option>\r\n                                <option value=\"Terminée\">Terminée</option>\r\n                            </select>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"col-span-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600\"\r\n                            >\r\n                                Ajouter l'article\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n                <div className=\"overflow-x-auto\">\r\n                    <table id=\"livraison-table\" className=\"w-full text-sm text-left text-gray-500\">\r\n                        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\r\n                            <tr>\r\n                                <th className=\"px-4 py-2\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) =>\r\n                                            setSelectedItems(\r\n                                                e.target.checked\r\n                                                    ? new Set(filteredData.map((_, i) => i))\r\n                                                    : new Set()\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                </th>\r\n                                {columns.map((col) => (\r\n                                    <th key={col.key} className=\"px-4 py-2\" style={col.style || {}}>\r\n                                        {col.header}\r\n                                    </th>\r\n                                ))}\r\n                                <th className=\"px-4 py-2\">Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((row, index) => (\r\n                                <tr\r\n                                    key={index}\r\n                                    className={`${selectedItems.has(index) ? \"bg-gray-100\" : \"\"} border-b hover:bg-gray-50`}\r\n                                >\r\n                                    <td className=\"px-4 py-2\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={selectedItems.has(index)}\r\n                                            onChange={() => toggleItem(index)}\r\n                                        />\r\n                                    </td>\r\n                                    {columns.map((col) => (\r\n                                        <td key={col.key} className=\"px-4 py-2\" style={col.style || {}}>\r\n                                            {row[col.key] || \"\"}\r\n                                        </td>\r\n                                    ))}\r\n                                    <td className=\"px-4 py-2\">\r\n                                        <button\r\n                                            onClick={() => handleDelete(index)}\r\n                                            className=\"text-red-500 hover:text-red-700\"\r\n                                        >\r\n                                            <TrashIcon className=\"h-5 w-5\" />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </TitleCard>\r\n    );\r\n};\r\n\r\nexport default Livraison;","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPageTitle } from '../../features/common/headerSlice';\r\nimport Leads from '../../features/leads';\r\n\r\nfunction InternalPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title: \"Leads\" }));\r\n    }, []);\r\n\r\n    return (\r\n        <Leads />\r\n    );\r\n}\r\n\r\nexport default InternalPage;"],"names":["useDispatch","fileNames","setFileNames","useState","selectedFile","setSelectedFile","selectedType","setSelectedType","data","setData","filteredData","setFilteredData","filters","setFilters","status","deliveryCode","articleCode","selectedItems","setSelectedItems","Set","isLoadingFiles","setIsLoadingFiles","error","setError","showAddForm","setShowAddForm","newItem","setNewItem","BASE_URL","process","useEffect","async","url","console","log","res","fetch","method","headers","body","JSON","stringify","type","ok","errorText","text","Error","json","files","length","err","message","fetchFiles","payload","fileName","value","stock","fetchData","updateItems","action","itemToAdd","Document","moment","format","Statut_tache_magasin","statut_entree_stock","longueur","largeur","hauteur","volume","poids","Quantite","poids_global","volume_quantite","manutention","Type_Rayon","Qte_theo_ced_UQA","quantit","quantite_ecart","parseFloat","toString","newData","size","Array","from","sort","a","b","forEach","index","splice","columns","header","key","style","width","TitleCard","title","className","onChange","e","target","disabled","map","name","placeholder","onClick","ws","XLSX","wb","printContent","document","getElementById","outerHTML","printWindow","window","open","write","close","print","onSubmit","preventDefault","required","Produit","designation_article","famille","libelle_produit","Plant_Storage","emplacement_cedant","Emplacement_cedant","Emplacement_prenant","Emplacement_EWM_Qte","readOnly","id","checked","_","i","col","row","has","newSelected","delete","add","toggleItem","handleDelete","TrashIcon","dispatch","setPageTitle"],"sourceRoot":""}