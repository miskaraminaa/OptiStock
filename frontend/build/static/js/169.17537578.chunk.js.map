{"version":3,"file":"static/js/169.17537578.chunk.js","mappings":"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","sources":["components/Typography/Subtitle.js","components/Cards/TitleCard.js","features/dashboard/components/LineChart.js","features/dashboard/components/BarChart.js","features/dashboard/components/DoughnutChart.js","features/dashboard/components/PieChart.js","features/dashboard/components/ScatterChart.js","features/dashboard/components/StackBarChart.js","features/dashboard/components/DeliveryStatusChart.js","features/dashboard/components/TaskCompletionChart.js","features/dashboard/components/StockDiscrepanciesChart.js","features/dashboard/components/StockQualityChart.js","features/dashboard/components/DeliveryDelaysChart.js","features/charts/index.js","pages/protected/Charts.js"],"sourcesContent":[" function Subtitle({styleClass, children}){\r\n    return(\r\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Subtitle","import Subtitle from \"../Typography/Subtitle\"\r\n\r\n  \r\n  function TitleCard({title, children, topMargin, TopSideButtons}){\r\n      return(\r\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\r\n\r\n            {/* Title for Card */}\r\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\r\n                {title}\r\n\r\n                {/* Top side button, show only if present */}\r\n                {\r\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\r\n                }\r\n              </Subtitle>\r\n              \r\n              <div className=\"divider mt-2\"></div>\r\n          \r\n              {/** Card Body */}\r\n              <div className='h-full w-full pb-6 bg-base-100'>\r\n                  {children}\r\n              </div>\r\n          </div>\r\n          \r\n      )\r\n  }\r\n  \r\n  \r\n  export default TitleCard","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst LineChart = ({ startDate, endDate, article }) => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const start = startDate?.toISOString().split('T')[0];\r\n        const end = endDate?.toISOString().split('T')[0];\r\n        const url = `${BASE_URL}/charts/stock-over-time?startDate=${start}&endDate=${end}${article ? `&article=${article}` : ''}`;\r\n        const res = await fetch(url);\r\n        if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n        const result = await res.json();\r\n        if (!result.data) throw new Error('Données invalides');\r\n\r\n        const chartData = {\r\n          labels: result.data.map(row => new Date(row.date).toLocaleDateString('fr-FR')),\r\n          datasets: [{\r\n            label: 'Stock total',\r\n            data: result.data.map(row => row.total_quantity),\r\n            fill: false,\r\n            borderColor: '#36b9cc',\r\n            tension: 0.1,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('[LineChart] Erreur:', error);\r\n        setError(`Échec du chargement : ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (startDate && endDate) {\r\n      fetchData();\r\n    }\r\n  }, [startDate, endDate, article, BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"h-96\">\r\n      {loading ? (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <ClipLoader color=\"#3b82f6\" size={40} />\r\n          <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <span className=\"text-red-800 text-sm\">{error}</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Line\r\n          data={data}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: context => `${context.dataset.label}: ${context.raw.toLocaleString('fr-FR')} unités`,\r\n                },\r\n              },\r\n            },\r\n            scales: {\r\n              y: { beginAtZero: true, title: { display: true, text: 'Quantité (unités)' } },\r\n              x: { title: { display: true, text: 'Date' } },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChart;","import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport TitleCard from '../../../components/Cards/TitleCard';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction BarChart(){\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          }\r\n        },\r\n      };\r\n      \r\n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n      \r\n      const data = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: 'Store 1',\r\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\r\n            backgroundColor: 'rgba(255, 99, 132, 1)',\r\n          },\r\n          {\r\n            label: 'Store 2',\r\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\r\n            backgroundColor: 'rgba(53, 162, 235, 1)',\r\n          },\r\n        ],\r\n      };\r\n\r\n    return(\r\n      <TitleCard title={\"Revenue\"}>\r\n            <Bar options={options} data={data} />\r\n      </TitleCard>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default BarChart","import React, { useState, useEffect } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst DoughnutChart = () => {\r\n  const [data, setData] = useState({ labels: [], datasets: [] });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const res = await fetch(`${BASE_URL}/charts/division-distribution`);\r\n        if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n        const result = await res.json();\r\n        if (!result.data) throw new Error('Données invalides');\r\n\r\n        const chartData = {\r\n          labels: result.data.map(row => row.division || 'Inconnu'),\r\n          datasets: [{\r\n            label: 'Distribution par division',\r\n            data: result.data.map(row => row.article_count),\r\n            backgroundColor: ['#36b9cc', '#e74c3c', '#2ecc71', '#f1c40f', '#3498db'],\r\n            borderColor: ['#ffffff'],\r\n            borderWidth: 1,\r\n          }],\r\n        };\r\n        setData(chartData);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('[DoughnutChart] Erreur:', error);\r\n        setError(`Échec du chargement : ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [BASE_URL]);\r\n\r\n  return (\r\n    <div className=\"h-96\">\r\n      {loading ? (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <ClipLoader color=\"#3b82f6\" size={40} />\r\n          <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <span className=\"text-red-800 text-sm\">{error}</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Doughnut\r\n          data={data}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')} articles`,\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoughnutChart;","import React, { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst PieChart = () => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/charts/type-stock-distribution`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => row.type_stock || 'Inconnu'),\r\n                    datasets: [{\r\n                        label: 'Distribution par type de stock',\r\n                        data: result.data.map(row => row.article_count),\r\n                        backgroundColor: ['#36b9cc', '#e74c3c', '#2ecc71', '#f1c40f', '#3498db'],\r\n                        borderColor: ['#ffffff'],\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[PieChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Pie\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')} articles`,\r\n                                },\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PieChart;","import React, { useState, useEffect } from 'react';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, PointElement, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(PointElement, LinearScale, Tooltip, Legend);\r\n\r\nconst ScatterChart = () => {\r\n    const [data, setData] = useState({ datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/charts/stock-vs-price`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    datasets: [{\r\n                        label: 'Stock vs Prix',\r\n                        data: result.data.map(row => ({ x: row.quantite, y: row.prix })),\r\n                        backgroundColor: '#36b9cc',\r\n                        pointRadius: 5,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[ScatterChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Scatter\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `Quantité: ${context.raw.x.toLocaleString('fr-FR')} unités, Prix: ${context.raw.y.toLocaleString('fr-FR')} €`,\r\n                                },\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            x: { title: { display: true, text: 'Quantité (unités)' } },\r\n                            y: { title: { display: true, text: 'Prix (€)' } },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScatterChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst StackBarChart = ({ startDate, endDate, article }) => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const start = startDate?.toISOString().split('T')[0];\r\n                const end = endDate?.toISOString().split('T')[0];\r\n                const url = `${BASE_URL}/charts/input-vs-output?startDate=${start}&endDate=${end}${article ? `&article=${article}` : ''}`;\r\n                const res = await fetch(url);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => new Date(row.date).toLocaleDateString('fr-FR')),\r\n                    datasets: [\r\n                        {\r\n                            label: 'Entrées',\r\n                            data: result.data.map(row => row.input_quantity),\r\n                            backgroundColor: '#2ecc71',\r\n                            stack: 'Stock',\r\n                        },\r\n                        {\r\n                            label: 'Sorties',\r\n                            data: result.data.map(row => row.output_quantity),\r\n                            backgroundColor: '#e74c3c',\r\n                            stack: 'Stock',\r\n                        },\r\n                    ],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[StackBarChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        if (startDate && endDate) {\r\n            fetchData();\r\n        }\r\n    }, [startDate, endDate, article, BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Bar\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.dataset.label}: ${context.raw.toLocaleString('fr-FR')} unités`,\r\n                                },\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            y: { beginAtZero: true, title: { display: true, text: 'Quantité (unités)' } },\r\n                            x: { title: { display: true, text: 'Date' } },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StackBarChart;","import React, { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst DeliveryStatusChart = () => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/charts/delivery-status`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => row.status || 'Inconnu'),\r\n                    datasets: [{\r\n                        label: 'Statut des livraisons',\r\n                        data: result.data.map(row => row.count),\r\n                        backgroundColor: ['#36b9cc', '#e74c3c', '#2ecc71', '#f1c40f', '#3498db', '#e67e22'],\r\n                        borderColor: ['#ffffff'],\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[DeliveryStatusChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Pie\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')}`,\r\n                                },\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeliveryStatusChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst TaskCompletionChart = ({ startDate, endDate }) => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const start = startDate?.toISOString().split('T')[0];\r\n                const end = endDate?.toISOString().split('T')[0];\r\n                const res = await fetch(`${BASE_URL}/charts/task-completion?startDate=${start}&endDate=${end}`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => row.status || 'Inconnu'),\r\n                    datasets: [{\r\n                        label: 'Taux d\\'achèvement des tâches',\r\n                        data: result.data.map(row => row.count),\r\n                        backgroundColor: '#36b9cc',\r\n                        borderColor: '#36b9cc',\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[TaskCompletionChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        if (startDate && endDate) {\r\n            fetchData();\r\n        }\r\n    }, [startDate, endDate, BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Bar\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')}`,\r\n                                },\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            y: { beginAtZero: true, title: { display: true, text: 'Nombre de tâches' } },\r\n                            x: { title: { display: true, text: 'Statut' } },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskCompletionChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst StockDiscrepanciesChart = () => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(`${BASE_URL}/charts/stock-discrepancies`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => row.article),\r\n                    datasets: [{\r\n                        label: 'Écart de stock (SAP - NX)',\r\n                        data: result.data.map(row => row.discrepancy),\r\n                        backgroundColor: '#e74c3c',\r\n                        borderColor: '#e74c3c',\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[StockDiscrepanciesChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Bar\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')} unités`,\r\n                                },\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            y: { beginAtZero: true, title: { display: true, text: 'Écart (unités)' } },\r\n                            x: { title: { display: true, text: 'Article' }, ticks: { autoSkip: false, maxRotation: 45, minRotation: 45 } },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StockDiscrepanciesChart;","import React, { useState, useEffect } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst StockQualityChart = ({ startDate, endDate }) => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const start = startDate?.toISOString().split('T')[0];\r\n                const end = endDate?.toISOString().split('T')[0];\r\n                const res = await fetch(`${BASE_URL}/charts/stock-quality?startDate=${start}&endDate=${end}`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: ['Stock libre', 'Contrôle qualité', 'Stock bloqué'],\r\n                    datasets: [{\r\n                        label: 'Qualité du stock',\r\n                        data: [\r\n                            result.data.free_stock || 0,\r\n                            result.data.quality_control_stock || 0,\r\n                            result.data.blocked_stock || 0,\r\n                        ],\r\n                        backgroundColor: ['#2ecc71', '#f1c40f', '#e74c3c'],\r\n                        borderColor: ['#ffffff'],\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[StockQualityChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        if (startDate && endDate) {\r\n            fetchData();\r\n        }\r\n    }, [startDate, endDate, BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Doughnut\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')} unités`,\r\n                                },\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StockQualityChart;","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);\r\n\r\nconst DeliveryDelaysChart = ({ startDate, endDate }) => {\r\n    const [data, setData] = useState({ labels: [], datasets: [] });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const start = startDate?.toISOString().split('T')[0];\r\n                const end = endDate?.toISOString().split('T')[0];\r\n                const res = await fetch(`${BASE_URL}/charts/delivery-delays?startDate=${start}&endDate=${end}`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ${res.status}`);\r\n                const result = await res.json();\r\n                if (!result.data) throw new Error('Données invalides');\r\n\r\n                const chartData = {\r\n                    labels: result.data.map(row => `Doc ${row.document}`),\r\n                    datasets: [{\r\n                        label: 'Retards de livraison',\r\n                        data: result.data.map(row => row.delay_days),\r\n                        backgroundColor: '#e74c3c',\r\n                        borderColor: '#e74c3c',\r\n                        borderWidth: 1,\r\n                    }],\r\n                };\r\n                setData(chartData);\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('[DeliveryDelaysChart] Erreur:', error);\r\n                setError(`Échec du chargement : ${error.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        if (startDate && endDate) {\r\n            fetchData();\r\n        }\r\n    }, [startDate, endDate, BASE_URL]);\r\n\r\n    return (\r\n        <div className=\"h-96\">\r\n            {loading ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"ml-3 text-gray-600 text-sm\">Chargement...</p>\r\n                </div>\r\n            ) : error ? (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                        <span className=\"text-red-800 text-sm\">{error}</span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <Bar\r\n                    data={data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: { position: 'bottom', labels: { font: { size: 12 } } },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: context => `${context.label}: ${context.raw.toLocaleString('fr-FR')} jours`,\r\n                                },\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            y: { beginAtZero: true, title: { display: true, text: 'Retard (jours)' } },\r\n                            x: { title: { display: true, text: 'Document' }, ticks: { autoSkip: false, maxRotation: 45, minRotation: 45 } },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeliveryDelaysChart;","import React, { useState, useEffect } from 'react';\r\nimport { FaChartBar } from 'react-icons/fa';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Datepicker from 'react-tailwindcss-datepicker';\r\nimport LineChart from '../dashboard/components/LineChart';\r\nimport BarChart from '../dashboard/components/BarChart';\r\nimport DoughnutChart from '../dashboard/components/DoughnutChart';\r\nimport PieChart from '../dashboard/components/PieChart';\r\nimport ScatterChart from '../dashboard/components/ScatterChart';\r\nimport StackBarChart from '../dashboard/components/StackBarChart';\r\nimport DeliveryStatusChart from '../dashboard/components/DeliveryStatusChart';\r\nimport TaskCompletionChart from '../dashboard/components/TaskCompletionChart';\r\nimport StockDiscrepanciesChart from '../dashboard/components/StockDiscrepanciesChart';\r\nimport StockQualityChart from '../dashboard/components/StockQualityChart';\r\nimport DeliveryDelaysChart from '../dashboard/components/DeliveryDelaysChart';\r\n\r\nfunction Charts() {\r\n    const [dateValue, setDateValue] = useState({\r\n        startDate: new Date('2025-01-01'),\r\n        endDate: new Date('2025-12-31'),\r\n    });\r\n    const [articles, setArticles] = useState([]);\r\n    const [selectedArticle, setSelectedArticle] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [kpis, setKpis] = useState({\r\n        totalStock: 0,\r\n        totalInput: 0,\r\n        totalOutput: 0,\r\n        uniqueArticles: 0,\r\n        freeStock: 0,\r\n        qualityControlStock: 0,\r\n        blockedStock: 0,\r\n    });\r\n    const [loadingKpis, setLoadingKpis] = useState(false);\r\n    const BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const fetchArticles = async () => {\r\n            try {\r\n                console.log('[Tableau de bord] Récupération des articles depuis :', `${BASE_URL}/charts/articles`);\r\n                const res = await fetch(`${BASE_URL}/charts/articles`);\r\n                if (!res.ok) throw new Error(`Erreur HTTP ! statut : ${res.status}`);\r\n                const result = await res.json();\r\n                console.log('[Tableau de bord] Données des articles :', JSON.stringify(result.data, null, 2));\r\n                if (!result.data || !Array.isArray(result.data)) throw new Error('Données des articles invalides');\r\n                setArticles(result.data);\r\n                setError(null);\r\n            } catch (err) {\r\n                console.error('[Tableau de bord] Erreur lors de la récupération des articles :', err);\r\n                setError('Échec du chargement des articles. Veuillez réessayer.');\r\n            }\r\n        };\r\n        fetchArticles();\r\n    }, [BASE_URL]);\r\n\r\n    useEffect(() => {\r\n        const fetchKpis = async () => {\r\n            setLoadingKpis(true);\r\n            setError(null);\r\n            try {\r\n                const start = dateValue.startDate?.toISOString().split('T')[0];\r\n                const end = dateValue.endDate?.toISOString().split('T')[0];\r\n                const [stockRes, inputRes, outputRes, uniqueRes, qualityRes] = await Promise.all([\r\n                    fetch(`${BASE_URL}/charts/total-stock?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/total-input?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/total-output?startDate=${start}&endDate=${end}`),\r\n                    fetch(`${BASE_URL}/charts/unique-articles`),\r\n                    fetch(`${BASE_URL}/charts/stock-quality?startDate=${start}&endDate=${end}`),\r\n                ]);\r\n\r\n                if (!stockRes.ok || !inputRes.ok || !outputRes.ok || !uniqueRes.ok || !qualityRes.ok) {\r\n                    throw new Error(`Erreur HTTP : ${stockRes.status || inputRes.status || outputRes.status || uniqueRes.status || qualityRes.status}`);\r\n                }\r\n\r\n                const [stockData, inputData, outputData, uniqueData, qualityData] = await Promise.all([\r\n                    stockRes.json(),\r\n                    inputRes.json(),\r\n                    outputRes.json(),\r\n                    uniqueRes.json(),\r\n                    qualityRes.json(),\r\n                ]);\r\n\r\n                console.log('[Tableau de bord] Données KPI :', { stockData, inputData, outputData, uniqueData, qualityData });\r\n                setKpis({\r\n                    totalStock: stockData.data || 0,\r\n                    totalInput: inputData.data || 0,\r\n                    totalOutput: outputData.data || 0,\r\n                    uniqueArticles: uniqueData.data || 0,\r\n                    freeStock: qualityData.data.free_stock || 0,\r\n                    qualityControlStock: qualityData.data.quality_control_stock || 0,\r\n                    blockedStock: qualityData.data.blocked_stock || 0,\r\n                });\r\n            } catch (err) {\r\n                console.error('[Tableau de bord] Erreur lors de la récupération des KPI :', err);\r\n                setError(`Échec du chargement des données KPI. Détails : ${err.message}`);\r\n            } finally {\r\n                setLoadingKpis(false);\r\n            }\r\n        };\r\n        if (dateValue.startDate && dateValue.endDate) {\r\n            fetchKpis();\r\n        }\r\n    }, [dateValue, BASE_URL]);\r\n\r\n    const handleDatePickerValueChange = (newValue) => {\r\n        console.log('[Tableau de bord] Date modifiée à :', newValue);\r\n        setDateValue({\r\n            startDate: newValue.startDate ? new Date(newValue.startDate) : null,\r\n            endDate: newValue.endDate ? new Date(newValue.endDate) : null,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"mx-auto max-w-7xl p-4 sm:p-6\">\r\n            <div className=\"mb-6\">\r\n                <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 mb-2 flex items-center\">\r\n                    <FaChartBar className=\"mr-3 text-blue-600\" />\r\n                    Tableau de bord des KPI\r\n                </h1>\r\n                <p className=\"text-gray-600 text-sm sm:text-base\">\r\n                    Visualisez et analysez les indicateurs clés de performance\r\n                </p>\r\n            </div>\r\n\r\n            {loadingKpis && (\r\n                <div className=\"flex flex-col justify-center items-center my-8\">\r\n                    <ClipLoader color=\"#3b82f6\" size={40} />\r\n                    <p className=\"mt-4 text-gray-600 text-sm\">\r\n                        Chargement des KPI...\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            {error && (\r\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"text-red-600 mr-3\">⚠️</div>\r\n                            <span className=\"text-red-800 text-sm sm:text-base\">{error}</span>\r\n                        </div>\r\n                        <button\r\n                            onClick={() => {\r\n                                setError(null);\r\n                                setLoadingKpis(true);\r\n                            }}\r\n                            className=\"px-4 py-2 bg-red-600 text-white rounded-lg shadow hover:bg-red-700 transition duration-200 flex items-center text-sm\"\r\n                        >\r\n                            Réessayer\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"mb-6 flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\r\n                <div className=\"w-full sm:w-72\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Période</label>\r\n                    <Datepicker\r\n                        containerClassName=\"w-full\"\r\n                        value={dateValue}\r\n                        theme=\"light\"\r\n                        inputClassName=\"w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-sm\"\r\n                        popoverDirection=\"down\"\r\n                        toggleClassName=\"invisible\"\r\n                        onChange={handleDatePickerValueChange}\r\n                        showShortcuts={true}\r\n                        primaryColor=\"blue\"\r\n                        i18n=\"fr\"\r\n                        configs={{\r\n                            shortcuts: {\r\n                                today: \"Aujourd'hui\",\r\n                                yesterday: \"Hier\",\r\n                                past: period => `Derniers ${period} jours`,\r\n                                currentMonth: \"Ce mois-ci\",\r\n                                pastMonth: \"Mois dernier\",\r\n                            },\r\n                            footer: {\r\n                                cancel: \"Annuler\",\r\n                                apply: \"Appliquer\",\r\n                            },\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"w-full sm:w-48\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Article</label>\r\n                    <select\r\n                        value={selectedArticle}\r\n                        onChange={(e) => setSelectedArticle(e.target.value)}\r\n                        className=\"w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 text-sm\"\r\n                    >\r\n                        <option value=\"\">Tous les articles</option>\r\n                        {articles.map((article) => (\r\n                            <option key={article} value={article}>{article}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {!loadingKpis && !error && (\r\n                <div className=\"mb-6 bg-white rounded-lg shadow-lg p-6\">\r\n                    <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Indicateurs clés</h2>\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Stock total</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.totalStock.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Entrées totales</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.totalInput.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Sorties totales</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.totalOutput.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Articles uniques</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.uniqueArticles.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Stock libre</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.freeStock.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Stock en contrôle qualité</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.qualityControlStock.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                        <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm text-center\">\r\n                            <h3 className=\"text-sm font-medium text-gray-600\">Stock bloqué</h3>\r\n                            <p className=\"text-2xl font-bold text-gray-800\">{kpis.blockedStock.toLocaleString('fr-FR')}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Entrées vs Sorties (Rotations)</h3>\r\n                    <StackBarChart startDate={dateValue.startDate} endDate={dateValue.endDate} article={selectedArticle} />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Mouvements par code (Rotations)</h3>\r\n                    <BarChart startDate={dateValue.startDate} endDate={dateValue.endDate} article={selectedArticle} />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Distribution par division (Dimensions)</h3>\r\n                    <DoughnutChart />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Distribution par type de stock (Dimensions)</h3>\r\n                    <PieChart />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Stock vs Prix (Explorer)</h3>\r\n                    <ScatterChart />\r\n                </div>\r\n\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Statut des livraisons (Livraison)</h3>\r\n                    <DeliveryStatusChart />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Taux d'achèvement des tâches (Rangement)</h3>\r\n                    <TaskCompletionChart startDate={dateValue.startDate} endDate={dateValue.endDate} />\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Écarts de stock SAP vs NX (Rotations)</h3>\r\n                    <StockDiscrepanciesChart />\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport Charts from '../../features/charts'\r\nimport { setPageTitle } from '../../features/common/headerSlice'\r\n\r\nfunction InternalPage(){\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title: \"Tableau de bord des KPI\"}))\r\n      }, [])\r\n\r\n\r\n    return(\r\n        <Charts />\r\n    )\r\n}\r\n\r\nexport default InternalPage"],"names":["styleClass","children","className","title","topMargin","TopSideButtons","ChartJS","LineElement","PointElement","CategoryScale","LinearScale","Tooltip","Legend","BarElement","Title","labels","data","datasets","label","map","Math","random","backgroundColor","TitleCard","options","responsive","plugins","legend","position","ArcElement","setData","useState","loading","setLoading","error","setError","BASE_URL","process","useEffect","async","res","fetch","ok","Error","status","result","json","chartData","row","division","article_count","borderColor","borderWidth","console","message","fetchData","color","size","maintainAspectRatio","font","tooltip","callbacks","context","raw","toLocaleString","type_stock","x","quantite","y","prix","pointRadius","scales","display","text","startDate","endDate","article","start","toISOString","split","end","url","Date","date","toLocaleDateString","input_quantity","stack","output_quantity","dataset","beginAtZero","count","discrepancy","ticks","autoSkip","maxRotation","minRotation","dateValue","setDateValue","articles","setArticles","selectedArticle","setSelectedArticle","kpis","setKpis","totalStock","totalInput","totalOutput","uniqueArticles","freeStock","qualityControlStock","blockedStock","loadingKpis","setLoadingKpis","log","JSON","stringify","Array","isArray","err","fetchArticles","stockRes","inputRes","outputRes","uniqueRes","qualityRes","Promise","all","stockData","inputData","outputData","uniqueData","qualityData","free_stock","quality_control_stock","blocked_stock","fetchKpis","onClick","containerClassName","value","theme","inputClassName","popoverDirection","toggleClassName","onChange","newValue","showShortcuts","primaryColor","i18n","configs","shortcuts","today","yesterday","past","period","currentMonth","pastMonth","footer","cancel","apply","e","target","dispatch","useDispatch","setPageTitle"],"sourceRoot":""}