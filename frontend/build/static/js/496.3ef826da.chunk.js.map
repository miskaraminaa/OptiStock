{"version":3,"file":"static/js/496.3ef826da.chunk.js","mappings":"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","sources":["components/Typography/Subtitle.js","components/Cards/TitleCard.js","components/FileUpload.js","features/dashboard/index.js","pages/protected/Dashboard.js"],"sourcesContent":[" function Subtitle({styleClass, children}){\r\n    return(\r\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Subtitle","import Subtitle from \"../Typography/Subtitle\"\r\n\r\n  \r\n  function TitleCard({title, children, topMargin, TopSideButtons}){\r\n      return(\r\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\r\n\r\n            {/* Title for Card */}\r\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\r\n                {title}\r\n\r\n                {/* Top side button, show only if present */}\r\n                {\r\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\r\n                }\r\n              </Subtitle>\r\n              \r\n              <div className=\"divider mt-2\"></div>\r\n          \r\n              {/** Card Body */}\r\n              <div className='h-full w-full pb-6 bg-base-100'>\r\n                  {children}\r\n              </div>\r\n          </div>\r\n          \r\n      )\r\n  }\r\n  \r\n  \r\n  export default TitleCard","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setPageTitle } from '../features/common/headerSlice';\r\nimport TitleCard from './Cards/TitleCard';\r\n\r\nconst FileUpload = () => {\r\n    const [importedFiles, setImportedFiles] = useState([]);\r\n    const [fileType, setFileType] = useState('LE');\r\n    const [uploadStatus, setUploadStatus] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title: \"Téléversement Fichiers SAP\" }));\r\n    }, [dispatch]);\r\n\r\n    const fileTypes = [\r\n        { value: 'LE', label: 'LE - Statut Livraisons Entrantes' },\r\n        { value: 'LET', label: 'LET - Tâches Livraisons Entrantes' },\r\n        { value: 'LS', label: 'LS - Statut Livraisons Sortantes' },\r\n        { value: 'LST', label: 'LST - Tâches Livraisons Sortantes' },\r\n        { value: 'MB51', label: 'MB51 - Mouvements SAP' },\r\n        { value: 'STOCK_EWM', label: 'STOCK_EWM' },\r\n        { value: 'STOCK_IAM', label: 'STOCK_IAM' }\r\n    ];\r\n\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    const fetchImportedFiles = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/uploads/files`);\r\n            console.log('Réponse fichiers importés:', response.data);\r\n            setImportedFiles(response.data.files);\r\n        } catch (error) {\r\n            console.error('Erreur lors de la récupération des fichiers importés:', {\r\n                message: error.message,\r\n                status: error.response?.status,\r\n                data: error.response?.data\r\n            });\r\n            setUploadStatus('Échec du chargement des fichiers importés.');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const loadFiles = async () => {\r\n            await fetchImportedFiles();\r\n            setIsLoading(false);\r\n        };\r\n        loadFiles();\r\n    }, [fetchImportedFiles]);\r\n\r\n    const onDrop = useCallback(\r\n        async (acceptedFiles) => {\r\n            setUploadStatus('Téléversement en cours...');\r\n\r\n            const uploadPromises = acceptedFiles.map(async (file) => {\r\n                const formData = new FormData();\r\n                formData.append('file', file);\r\n                formData.append('type', fileType);\r\n\r\n                try {\r\n                    const response = await axios.post(`${API_URL}/uploads`, formData, {\r\n                        headers: { 'Content-Type': 'multipart/form-data' },\r\n                    });\r\n                    console.log('Réponse téléversement:', response.data);\r\n                    return { status: 'success', message: response.data.message, fileName: file.name };\r\n                } catch (error) {\r\n                    console.error('Erreur téléversement:', {\r\n                        message: error.message,\r\n                        status: error.response?.status,\r\n                        data: error.response?.data\r\n                    });\r\n                    return {\r\n                        status: 'failed',\r\n                        error: error.response?.data?.message || 'Échec du téléversement',\r\n                        fileName: file.name\r\n                    };\r\n                }\r\n            });\r\n\r\n            try {\r\n                const results = await Promise.all(uploadPromises);\r\n                await fetchImportedFiles();\r\n\r\n                const allSuccessful = results.every((result) => result.status === 'success');\r\n                const allFailed = results.every((result) => result.status === 'failed');\r\n                if (allSuccessful) {\r\n                    setUploadStatus('Téléversement réussi pour tous les fichiers !');\r\n                } else if (allFailed) {\r\n                    setUploadStatus('Échec du téléversement de tous les fichiers !');\r\n                } else {\r\n                    setUploadStatus('Certains fichiers ont été téléversés avec succès, d\\'autres ont échoué.');\r\n                }\r\n                const failedUploads = results.filter(result => result.status === 'failed');\r\n                if (failedUploads.length > 0) {\r\n                    console.log('Fichiers échoués:', failedUploads);\r\n                    setUploadStatus(prev => prev + '\\nErreurs : ' + failedUploads.map(f => `${f.fileName}: ${f.error}`).join(', '));\r\n                }\r\n            } catch (error) {\r\n                setUploadStatus(`Erreur lors du traitement des fichiers : ${error.message}`);\r\n            }\r\n        },\r\n        [fileType, fetchImportedFiles]\r\n    );\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n        accept: {\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\r\n            'application/vnd.ms-excel': ['.xls'],\r\n        },\r\n    });\r\n\r\n    const groupedImportedFiles = importedFiles.reduce((acc, file) => {\r\n        acc[file.type] = acc[file.type] || [];\r\n        acc[file.type].push(file);\r\n        return acc;\r\n    }, {});\r\n\r\n    const handleDeleteFile = async (fileId) => {\r\n        if (window.confirm('Êtes-vous sûr de vouloir supprimer ce fichier et ses données associées ? Cette action est irréversible.')) {\r\n            try {\r\n                await axios.delete(`${API_URL}/uploads/files/${fileId}`);\r\n                await fetchImportedFiles();\r\n                setUploadStatus('Fichier et données associées supprimés avec succès.');\r\n            } catch (error) {\r\n                console.error('Erreur lors de la suppression du fichier:', error);\r\n                setUploadStatus('Échec de la suppression du fichier.');\r\n            }\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n                <p className=\"text-xl text-gray-600\">Chargement...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-4xl mx-auto p-6 bg-gray-100 min-h-screen\">\r\n            <h1 className=\"text-2xl font-bold mb-6 text-center\">Téléversement Fichiers SAP</h1>\r\n\r\n            <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n                <div className=\"mb-4\">\r\n                    <label className=\"block text-sm font-medium text-gray-700\">\r\n                        Sélectionner le Type de Fichier\r\n                    </label>\r\n                    <select\r\n                        value={fileType}\r\n                        onChange={(e) => setFileType(e.target.value)}\r\n                        className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"\r\n                    >\r\n                        {fileTypes.map((type) => (\r\n                            <option key={type.value} value={type.value}>{type.label}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div\r\n                    {...getRootProps()}\r\n                    className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer ${isDragActive ? 'border-indigo-500 bg-indigo-50' : 'border-gray-300'}`}\r\n                >\r\n                    <input {...getInputProps()} />\r\n                    <p className=\"text-gray-600\">\r\n                        {isDragActive\r\n                            ? 'Déposez les fichiers Excel ici...'\r\n                            : 'Glissez et déposez les fichiers Excel ici, ou cliquez pour sélectionner'}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-500\">(fichiers .xlsx, .xls uniquement)</p>\r\n                </div>\r\n\r\n                {uploadStatus && (\r\n                    <p\r\n                        className={`mt-4 text-center ${uploadStatus.includes('réussi')\r\n                            ? 'text-green-600'\r\n                            : uploadStatus.includes('Échec') || uploadStatus.includes('Erreur')\r\n                                ? 'text-red-600'\r\n                                : 'text-yellow-600'}`}\r\n                    >\r\n                        {uploadStatus}\r\n                    </p>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Fichiers Importés</h2>\r\n                {Object.keys(groupedImportedFiles).length === 0 ? (\r\n                    <p className=\"text-gray-500 text-center\">Aucun fichier importé pour le moment.</p>\r\n                ) : (\r\n                    Object.keys(groupedImportedFiles).map((type) => (\r\n                        <div key={type} className=\"mb-6\">\r\n                            <h3 className=\"text-lg font-medium text-gray-800 mb-2\">\r\n                                Type : {fileTypes.find(t => t.value === type)?.label || type}\r\n                            </h3>\r\n                            <ul className=\"divide-y divide-gray-200\">\r\n                                {groupedImportedFiles[type].map((file) => (\r\n                                    <li key={file.id} className=\"py-2 flex justify-between items-center\">\r\n                                        <div>\r\n                                            <span className=\"text-gray-700\">{file.fichier_name}</span>\r\n                                            <span\r\n                                                className={`ml-2 text-sm ${file.status === 'imported'\r\n                                                    ? 'text-green-600'\r\n                                                    : file.status === 'partial'\r\n                                                        ? 'text-yellow-600'\r\n                                                        : 'text-red-600'\r\n                                                    }`}\r\n                                            >\r\n                                                ({file.status === 'imported' ? 'Importé' : file.status === 'partial' ? 'Partiel' : 'Échoué'})\r\n                                            </span>\r\n                                        </div>\r\n                                        <div className=\"flex items-center space-x-4\">\r\n                                            <div className=\"text-gray-500 text-sm\">\r\n                                                {new Date(file.import_date).toLocaleString('fr-FR')}\r\n                                            </div>\r\n                                            <button\r\n                                                onClick={() => handleDeleteFile(file.id)}\r\n                                                className=\"px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm\"\r\n                                            >\r\n                                                Supprimer\r\n                                            </button>\r\n                                        </div>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;","import FileUpload from '../../components/FileUpload';\r\n\r\nfunction Dashboard() {\r\n    return (\r\n        <>\r\n            {/* ---------------------- File Upload Section ------------------------- */}\r\n            <div className=\"mt-2\">\r\n                <FileUpload />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setPageTitle } from '../../features/common/headerSlice'\r\nimport Dashboard from '../../features/dashboard/index'\r\n\r\nfunction InternalPage(){\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setPageTitle({ title : \"Dashboard\"}))\r\n      }, [])\r\n\r\n\r\n    return(\r\n        <Dashboard />\r\n    )\r\n}\r\n\r\nexport default InternalPage"],"names":["styleClass","children","className","title","topMargin","TopSideButtons","importedFiles","setImportedFiles","useState","fileType","setFileType","uploadStatus","setUploadStatus","isLoading","setIsLoading","dispatch","useNavigate","useDispatch","useEffect","setPageTitle","fileTypes","value","label","API_URL","process","fetchImportedFiles","useCallback","async","response","axios","console","log","data","files","error","message","status","loadFiles","onDrop","uploadPromises","acceptedFiles","map","formData","FormData","append","file","headers","fileName","name","results","Promise","all","allSuccessful","every","result","allFailed","failedUploads","filter","length","prev","f","join","getRootProps","getInputProps","isDragActive","useDropzone","accept","groupedImportedFiles","reduce","acc","type","push","onChange","e","target","includes","Object","keys","find","t","fichier_name","Date","import_date","toLocaleString","onClick","window","confirm","fileId","handleDeleteFile","id","FileUpload"],"sourceRoot":""}