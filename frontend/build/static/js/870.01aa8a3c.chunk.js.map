{"version":3,"file":"static/js/870.01aa8a3c.chunk.js","mappings":"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","sources":["components/FileUpload.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport * as XLSX from 'xlsx';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst FileUpload = () => {\r\n    const [files, setFiles] = useState([]);\r\n    const [fileType, setFileType] = useState('LE');\r\n    const [uploadStatus, setUploadStatus] = useState('');\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [fileContent, setFileContent] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    const fileTypes = ['LE', 'LET', 'LS', 'LST', 'MB51', 'MOUVEMENT', 'STOCK_EWM', 'ETAT_DE_STOCK'];\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    // Verify token on component mount\r\n    useEffect(() => {\r\n        const verifyToken = async () => {\r\n            const token = localStorage.getItem('token');\r\n            console.log('Token on mount:', token);\r\n            if (!token) {\r\n                setUploadStatus('No session found. Redirecting to login...');\r\n                setTimeout(() => navigate('/login'), 2000);\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await axios.get(`${API_URL}/auth/verify-token`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                console.log('Verify token response:', response.data);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Token verification error:', {\r\n                    message: error.message,\r\n                    status: error.response?.status,\r\n                    data: error.response?.data\r\n                });\r\n                setUploadStatus('Invalid session. Redirecting to login...');\r\n                localStorage.removeItem('token');\r\n                setTimeout(() => navigate('/login'), 2000);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        verifyToken();\r\n    }, [navigate]);\r\n\r\n    const onDrop = useCallback(\r\n        async (acceptedFiles) => {\r\n            const token = localStorage.getItem('token');\r\n            console.log('Token on upload:', token);\r\n            if (!token) {\r\n                setUploadStatus('Please log in to upload files.');\r\n                navigate('/login');\r\n                return;\r\n            }\r\n\r\n            const existingFiles = files.map((f) => f.name);\r\n            const newFiles = acceptedFiles\r\n                .filter((file) => !existingFiles.includes(file.name))\r\n                .map((file) => ({\r\n                    name: file.name,\r\n                    type: fileType,\r\n                    size: file.size,\r\n                    date: new Date().toLocaleString(),\r\n                    fileObj: file,\r\n                    data: null,\r\n                }));\r\n\r\n            if (newFiles.length === 0) {\r\n                setUploadStatus('All selected files are already imported!');\r\n                return;\r\n            }\r\n\r\n            setUploadStatus('Uploading...');\r\n\r\n            // Read files locally for preview\r\n            const readPromises = newFiles.map(\r\n                (fileEntry) =>\r\n                    new Promise((resolve, reject) => {\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            try {\r\n                                const data = new Uint8Array(e.target.result);\r\n                                const workbook = XLSX.read(data, { type: 'array' });\r\n                                const sheetName = workbook.SheetNames[0];\r\n                                const worksheet = workbook.Sheets[sheetName];\r\n                                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n                                fileEntry.data = jsonData;\r\n                                resolve();\r\n                            } catch (error) {\r\n                                reject(new Error(`Failed to read file ${fileEntry.name}: ${error.message}`));\r\n                            }\r\n                        };\r\n                        reader.onerror = () => reject(new Error(`Error reading file ${fileEntry.name}`));\r\n                        reader.readAsArrayBuffer(fileEntry.fileObj);\r\n                    })\r\n            );\r\n\r\n            try {\r\n                await Promise.all(readPromises);\r\n\r\n                // Send each file to the backend\r\n                const uploadPromises = newFiles.map(async (fileEntry) => {\r\n                    const formData = new FormData();\r\n                    formData.append('file', fileEntry.fileObj);\r\n                    formData.append('type', fileEntry.type);\r\n\r\n                    try {\r\n                        const response = await axios.post(`${API_URL}/uploads`, formData, {\r\n                            headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                'Content-Type': 'multipart/form-data'\r\n                            },\r\n                        });\r\n                        console.log('Upload response:', response.data);\r\n                        return {\r\n                            ...fileEntry,\r\n                            status: 'success',\r\n                            backendData: response.data,\r\n                        };\r\n                    } catch (error) {\r\n                        console.error('Upload error:', {\r\n                            message: error.message,\r\n                            status: error.response?.status,\r\n                            data: error.response?.data\r\n                        });\r\n                        if (error.response?.status === 401) {\r\n                            setUploadStatus('Session expired. Redirecting to login...');\r\n                            localStorage.removeItem('token');\r\n                            navigate('/login');\r\n                            return {\r\n                                ...fileEntry,\r\n                                status: 'failed',\r\n                                error: 'Unauthorized: Please log in again',\r\n                            };\r\n                        }\r\n                        return {\r\n                            ...fileEntry,\r\n                            status: 'failed',\r\n                            error: error.response?.data?.message || 'Upload failed',\r\n                        };\r\n                    }\r\n                });\r\n\r\n                const uploadedFiles = await Promise.all(uploadPromises);\r\n\r\n                // Update state with uploaded files\r\n                setFiles((prevFiles) => [...prevFiles, ...uploadedFiles]);\r\n\r\n                // Set upload status based on results\r\n                const allSuccessful = uploadedFiles.every((file) => file.status === 'success');\r\n                const allFailed = uploadedFiles.every((file) => file.status === 'failed');\r\n                if (allSuccessful) {\r\n                    setUploadStatus('Upload successful!');\r\n                } else if (allFailed) {\r\n                    setUploadStatus('Upload failed for all files!');\r\n                } else {\r\n                    setUploadStatus('Some files uploaded successfully, others failed.');\r\n                }\r\n            } catch (error) {\r\n                setUploadStatus(`Error processing files: ${error.message}`);\r\n            }\r\n        },\r\n        [fileType, files, navigate]\r\n    );\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n        accept: {\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\r\n            'application/vnd.ms-excel': ['.xls'],\r\n        },\r\n    });\r\n\r\n    const groupedFiles = files.reduce((acc, file) => {\r\n        acc[file.type] = acc[file.type] || [];\r\n        acc[file.type].push(file);\r\n        return acc;\r\n    }, {});\r\n\r\n    const openDialog = (file) => {\r\n        setSelectedFile(file);\r\n        setFileContent(file.data || []);\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setSelectedFile(null);\r\n        setFileContent([]);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n                <p className=\"text-xl text-gray-600\">Verifying session...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-4xl mx-auto p-6 bg-gray-100 min-h-screen\">\r\n            <h1 className=\"text-2xl font-bold mb-6 text-center\">OptiStock File Upload</h1>\r\n\r\n            <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n                <div className=\"mb-4\">\r\n                    <label className=\"block text-sm font-medium text-gray-700\">Select File Type</label>\r\n                    <select\r\n                        value={fileType}\r\n                        onChange={(e) => setFileType(e.target.value)}\r\n                        className=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"\r\n                    >\r\n                        {fileTypes.map((type) => (\r\n                            <option key={type} value={type}>{type}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div\r\n                    {...getRootProps()}\r\n                    className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer ${isDragActive ? 'border-indigo-500 bg-indigo-50' : 'border-gray-300'}`}\r\n                >\r\n                    <input {...getInputProps()} />\r\n                    <p className=\"text-gray-600\">\r\n                        {isDragActive\r\n                            ? 'Drop the Excel files here...'\r\n                            : 'Drag & drop Excel files here, or click to select'}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-500\">(.xlsx, .xls files only)</p>\r\n                </div>\r\n\r\n                {uploadStatus && (\r\n                    <p\r\n                        className={`mt-4 text-center ${uploadStatus.includes('successful')\r\n                            ? 'text-green-600'\r\n                            : uploadStatus.includes('failed') || uploadStatus.includes('Error')\r\n                                ? 'text-red-600'\r\n                                : 'text-yellow-600'}`}\r\n                    >\r\n                        {uploadStatus}\r\n                    </p>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Uploaded Files</h2>\r\n                {Object.keys(groupedFiles).length === 0 ? (\r\n                    <p className=\"text-gray-500 text-center\">No files uploaded yet.</p>\r\n                ) : (\r\n                    Object.keys(groupedFiles).map((type) => (\r\n                        <div key={type} className=\"mb-6\">\r\n                            <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Type: {type}</h3>\r\n                            <ul className=\"divide-y divide-gray-200\">\r\n                                {groupedFiles[type].map((file, index) => (\r\n                                    <li key={index} className=\"py-2 flex justify-between items-center\">\r\n                                        <div>\r\n                                            <span className=\"text-gray-700\">{file.name}</span>\r\n                                            {file.status && (\r\n                                                <span\r\n                                                    className={`ml-2 text-sm ${file.status === 'success' ? 'text-green-600' : 'text-red-600'}`}\r\n                                                >\r\n                                                    ({file.status === 'success' ? 'Uploaded' : file.error})\r\n                                                </span>\r\n                                            )}\r\n                                        </div>\r\n                                        <div className=\"flex items-center\">\r\n                                            <span className=\"text-gray-500 text-sm\">\r\n                                                {(file.size / 1024).toFixed(2)} KB | {file.date}\r\n                                            </span>\r\n                                            <button\r\n                                                onClick={() => openDialog(file)}\r\n                                                className=\"ml-4 px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                                            >\r\n                                                View\r\n                                            </button>\r\n                                        </div>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n\r\n            {selectedFile && (\r\n                <div\r\n                    className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\"\r\n                    onClick={closeDialog}\r\n                >\r\n                    <div\r\n                        className=\"bg-white p-6 rounded-lg shadow-lg w-3/4 max-h-[80vh] overflow-y-auto\"\r\n                        onClick={(e) => e.stopPropagation()}\r\n                    >\r\n                        <h3 className=\"text-lg font-semibold mb-4\">File Content: {selectedFile.name}</h3>\r\n                        {fileContent.length > 0 && fileContent[0]?.length > 0 ? (\r\n                            <table className=\"w-full border-collapse\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {fileContent[0].map((header, index) => (\r\n                                            <th key={index} className=\"border p-2 bg-gray-200\">{header}</th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {fileContent.slice(1).map((row, rowIndex) => (\r\n                                        <tr key={rowIndex}>\r\n                                            {row.map((cell, cellIndex) => (\r\n                                                <td key={cellIndex} className=\"border p-2\">{cell}</td>\r\n                                            ))}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        ) : (\r\n                            <p className=\"text-gray-500\">No valid content to display.</p>\r\n                        )}\r\n                        {selectedFile.status === 'success' && selectedFile.backendData && (\r\n                            <div className=\"mt-4\">\r\n                                <h4 className=\"text-md font-medium\">Backend Response:</h4>\r\n                                <p>Successful Rows: {selectedFile.backendData.summary.successfulRows}</p>\r\n                                <p>Failed Rows: {selectedFile.backendData.summary.failedRows}</p>\r\n                                {selectedFile.backendData.data.failureDetails.length > 0 && (\r\n                                    <div>\r\n                                        <h5 className=\"text-sm font-medium\">Failure Details:</h5>\r\n                                        <ul>\r\n                                            {selectedFile.backendData.data.failureDetails.map((fail, idx) => (\r\n                                                <li key={idx} className=\"text-sm text-red-600\">\r\n                                                    Row {fail.rowIndex}: {fail.error}\r\n                                                </li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                        <button\r\n                            onClick={closeDialog}\r\n                            className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\r\n                        >\r\n                            Close\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;"],"names":["files","setFiles","useState","fileType","setFileType","uploadStatus","setUploadStatus","selectedFile","setSelectedFile","fileContent","setFileContent","isLoading","setIsLoading","navigate","useNavigate","API_URL","process","useEffect","async","token","localStorage","getItem","console","log","setTimeout","response","axios","headers","Authorization","data","error","message","status","removeItem","verifyToken","onDrop","useCallback","existingFiles","map","f","name","newFiles","acceptedFiles","filter","file","includes","type","size","date","Date","toLocaleString","fileObj","length","readPromises","fileEntry","Promise","resolve","reject","reader","FileReader","onload","e","Uint8Array","target","result","workbook","XLSX","sheetName","SheetNames","worksheet","Sheets","jsonData","header","Error","onerror","readAsArrayBuffer","all","uploadPromises","formData","FormData","append","backendData","uploadedFiles","prevFiles","allSuccessful","every","allFailed","getRootProps","getInputProps","isDragActive","useDropzone","accept","groupedFiles","reduce","acc","push","closeDialog","className","value","onChange","Object","keys","index","toFixed","onClick","openDialog","stopPropagation","slice","row","rowIndex","cell","cellIndex","summary","successfulRows","failedRows","failureDetails","fail","idx"],"sourceRoot":""}